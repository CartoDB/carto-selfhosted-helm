{{- if .Values.replicated.enabled }}
apiVersion: v1
kind: Secret
metadata:
  labels:
    troubleshoot.sh/kind: support-bundle
  name: {{ .Release.Name }}-support-bundle
  namespace: {{ .Release.Namespace | quote }}
stringData:
    # To use it: kubectl support-bundle --load-cluster-specs --selector=carto.com/kind=support-bundle
  support-bundle-spec: |
    apiVersion: troubleshoot.sh/v1beta2
    kind: SupportBundle
    metadata:
      name: {{ .Release.Name }}-support-bundle
      namespace: {{ .Release.Namespace | quote }}
    spec:
      collectors:
        - clusterInfo: {}
        - clusterResources:
            namespaces:
                - {{ .Release.Namespace }}
        - postgres:
            collectorName: workspace-db
            uri: postgresql://{{ include "carto.postgresql.user" . | trimAll "\"" }}:{{ .Values.externalPostgresql.password }}@{{ include "carto.postgresql.host" . | trimAll "\"" }}:{{ include "carto.postgresql.port" . | trimAll "\"" }}/{{ include "carto.postgresql.databaseName" . | trimAll "\"" }}
        {{- if .Values.internalRedis.enabled }}
        - redis:
            collectorName: redis
            uri: redis://:{{ .Values.internalRedis.auth.password | trimAll "\"" }}@{{ include "carto.redis.host" . | trimAll "\"" }}:{{ include "carto.redis.port" . | trimAll "\"" }}
        {{- else }}
        - redis:
            collectorName: redis
            uri: redis://:{{ .Values.externalRedis.password | trimAll "\"" }}@{{ include "carto.redis.host" . | trimAll "\"" }}:{{ include "carto.redis.port" . | trimAll "\"" }}
        {{- end }}
        - logs:
            collectorName: namespace-{{ .Release.Namespace }}-logs
            name: namespace-{{ .Release.Namespace }}-logs
            namespace: {{ .Release.Namespace }}
            limits:
              maxAge: 720h # 30*24
              maxLines: 10000
              maxBytes: 5000000
        - runPod:
            collectorName: support-run-health-on-maps-api
            name: support-run-health-on-maps-api
            namespace: {{ .Release.Namespace | quote }}
            timeout: 30s   # Maximum supported 30s !
            podSpec:
              containers:
                - name: run-health
                  image: {{ template "carto.mapsApi.image" . }}
                  imagePullPolicy: Always
                  command: ["bash"]
                  args: ["-exc", "npm run ready-to-run:built"]
                  env:
                    - name: WORKSPACE_POSTGRES_PASSWORD
                      value: {{ .Values.externalPostgresql.password | quote }}
                      # valueFrom:
                      #   secretKeyRef:
                      #     name: {{ include "carto.postgresql.secretName" . }}
                      #     key: {{ include "carto.postgresql.secret.key" . }}
                    - name: REDIS_PASSWORD
                      {{- if .Values.internalRedis }}
                      value: {{ .Values.internalRedis.auth.password | quote }}
                      {{- end }}
                      {{- if not .Values.internalRedis }}
                      value: {{ .Values.externalRedis.password | quote }}
                      {{- end }}
                      # valueFrom:
                      #   secretKeyRef:
                      #     name: {{ include "carto.redis.secretName" . }}
                      #     key: {{ include "carto.redis.existingsecret.key" . | quote }}
                    - name: WORKSPACE_POSTGRES_HOST
                      value: {{ include "carto.postgresql.host" . }}
                    - name: WORKSPACE_POSTGRES_PORT
                      value: {{ include "carto.postgresql.port" . }}
                    - name: WORKSPACE_POSTGRES_DB
                      value: {{ include "carto.postgresql.databaseName" . }}
                    - name: WORKSPACE_POSTGRES_USER
                      value: {{ include "carto.postgresql.user" . }}
                    - name: MAPS_API_V3_TENANT_ID
                      value: {{ .Values.cartoConfigValues.selfHostedTenantId | quote }}
                    - name: CARTO_SELFHOSTED_VERSION
                      value: {{ .Chart.AppVersion | quote }}
                    - name: REDIS_CACHE_PREFIX
                      value: "onprem"
                    - name: REDIS_HOST
                      value: {{ include "carto.redis.host" . }}
                    - name: AUTH0_DOMAIN
                      value: {{ .Values.cartoConfigValues.cartoAuth0CustomDomain | quote }}
                    - name: AUTH0_AUDIENCE
                      value: "carto-cloud-native-api"
                    - name: MAPS_API_V3_JWT_SECRET
                      value: "dummy_placeholder_"
                    - name: PUBSUB_PROJECT_ID
                      value: {{ .Values.cartoConfigValues.selfHostedGcpProjectId | quote }}
                    - name: MAPS_API_V3_PUBSUB_TENANT_BUS_TOPIC
                      value: "projects/{{ .Values.cartoConfigValues.selfHostedGcpProjectId }}/topics/tenant-bus"
      analyzers:
        - postgres:
            checkName: PostgreSQL is available
            collectorName: workspace-db
            outcomes:
              - fail:
                  when: connected == false
                  message: Cannot connect to PostgreSQL server
              - pass:
                  when: connected == true
                  message: The PostgreSQL server is available
        - postgres:
            checkName: PostgreSQL must be v14.x or later
            collectorName: workspace-db
            outcomes:
              - fail:
                  when: version < 14.x
                  message: The PostgreSQL server must be at least version 14
              - pass:
                  message: The PostgreSQL version is ready
        - jsonCompare:
            checkName: Redis is available
            fileName: redis/redis.json
            path: "isConnected"
            value: |
              true
            outcomes:
              - fail:
                  when: "false"
                  message: Cannot connect to the Redis instance
              - pass:
                  when: "true"
                  message: The Redis instance is available
        - textAnalyze:
            checkName: Required check maps-api could run
            fileName: support-run-health-on-maps-api/support-run-health-on-maps-api.log
            regex: "overall_status: 'up'"
            outcomes:
              - pass:
                  when: "true"
                  message: "No error found"
              - fail:
                  when: "false"
                  message: "We found some kind of error during the execution"
        - clusterVersion:
            outcomes:
              - fail:
                  when: "< 1.25.0"
                  message: The application requires Kubernetes 1.25.0 or later, and recommends 1.26.0 or later.
                  uri: https://kubernetes.io/releases
              - warn:
                  when: "< 1.26.0"
                  message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.26.0 or later.
                  uri: https://kubernetes.io/releases
              - pass:
                  message: Your cluster meets the recommended and required versions of Kubernetes.
        - containerRuntime:
            outcomes:
              - pass:
                  when: "== containerd"
                  message: containerd container runtime was found.
              - fail:
                  message: Did not find containerd container runtime.
        - distribution:
            outcomes:
              - fail:
                  when: "== docker-desktop"
                  message: The application does not support Docker Desktop clusters.
              - fail:
                  when: "== microk8s"
                  message: The application does not support MicroK8s clusters.
              - fail:
                  when: "== minikube"
                  message: The application does not support minikube clusters.
              - pass:
                  when: "== eks"
                  message: EKS is a supported distribution.
              - pass:
                  when: "== gke"
                  message: GKE is a supported distribution.
              - pass:
                  when: "== aks"
                  message: AKS is a supported distribution.
              # Will be supported in the future
              - pass:
                  when: "== kurl"
                  message: kURL is a supported distribution.
              - pass:
                  when: "== digitalocean"
                  message: DigitalOcean is a supported distribution.
              - warn:
                  message: Unable to determine the distribution of Kubernetes.
        - nodeResources:
            checkName: The cluster should contain at least 6 cores
            outcomes:
              - fail:
                  when: "sum(cpuCapacity) < 5"
                  message: The cluster must contain at least 5 cores. ➡️ Ignore if you have auto-scale enabled in your cluster.
              - warn:
                  when: "sum(cpuCapacity) < 6"
                  message: The cluster should contain at least 6 cores. ➡️ Ignore if you have auto-scale enabled in your cluster.
              - pass:
                  message: There are at least 6 cores in the cluster.
        - nodeResources:
            checkName: The cluster must contain at least 16 GB
            outcomes:
              - fail:
                  when: "sum(allocatableMemory) < 16Gi"
                  message: The cluster must contain at least 16Gi. ➡️ Ignore if you have auto-scale enabled in your cluster.
              - warn:
                  when: "sum(allocatableMemory) < 17Gi"
                  message: The cluster should contain at least 17Gi. ➡️ Ignore if you have auto-scale enabled in your cluster.
              - pass:
                  message: There are at least 16 Gi in the cluster.
        - yamlCompare:
            annotations:
              kots.io/installer: "true"
            checkName: Kubernetes Installer
            outcomes:
              - fail:
                  message: The Kubernetes installer for this version differs from what you have installed. It is recommended that you run the updated Kubernetes installer before deploying this version.
                  uri: https://kurl.sh/carto
              - pass:
                  message: The Kubernetes installer for this version matches what is currently installed.
        - clusterPodStatuses:
            name: unhealthy
            namespaces:
                - {{ .Release.Namespace }}
            outcomes:
            - fail:
                when: "== CrashLoopBackOff"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in a CrashLoopBackOff state.
            - fail:
                when: "== ImagePullBackOff"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in a ImagePullBackOff state.
            - fail:
                when: "== Pending"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in a Pending state.
            - fail:
                when: "== Evicted"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in a Evicted state.
            - fail:
                when: "== Terminating"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in a Terminating state.
            - fail:
                when: "== Init:Error"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in an Init:Error state.
            - fail:
                when: "== Init:CrashLoopBackOff"
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is in an Init:CrashLoopBackOff state.
            - fail:
                when: "!= Healthy" # Catch all unhealthy pods. A pod is considered healthy if it has a status of Completed, or Running and all of its containers are ready.
                # {{ printf "{{ .Status.Reason }}" }} displays the current status of the pod, while {{ printf "{{ .Status.Message }}" }} provides a detailed explanation of why the pod is unhealthy, based on logged events.
                message: Pod {{ printf "{{ .Namespace }}" }}/{{ printf "{{ .Name }}" }} is unhealthy with a status of {{ printf "{{ .Status.Reason }}" }}. Message is {{ printf "{{ .Status.Message }}" }} 
{{- end }}