{{- if and (include "carto.baseUrl" .) (.Values.appConfigValues.httpCacheEnabled) (not .Values.cartoConfigValues.onlyRunRouter) }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.httpCache.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: http-cache
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.httpCache.replicaCount }}
  {{- if .Values.httpCache.updateStrategy }}
  strategy: {{- toYaml .Values.httpCache.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: http-cache
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/http-cache/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/http-cache/secret.yaml") . | sha256sum }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- if .Values.httpCache.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: http-cache
        {{- if .Values.httpCache.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "carto.httpCache.serviceAccountName" . }}
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.httpCache.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.httpCache.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.httpCache.podAffinityPreset "component" "httpCache" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.httpCache.podAntiAffinityPreset "component" "httpCache" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.httpCache.nodeAffinityPreset.type "key" .Values.httpCache.nodeAffinityPreset.key "values" .Values.httpCache.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.httpCache.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.httpCache.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.priorityClassName }}
      priorityClassName: {{ .Values.httpCache.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.httpCache.schedulerName }}
      schedulerName: {{ .Values.httpCache.schedulerName | quote }}
      {{- end }}
      {{- if .Values.httpCache.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.httpCache.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if not .Values.diagnosticMode.enabled }}
      initContainers:
        {{- if .Values.internalPostgresql.enabled }}
        {{ include "carto.postgresql-init-container" (dict "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.httpCache.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.httpCache.terminationGracePeriodSeconds }}
      containers:
        - name: http-cache
          image: {{ template "carto.httpCache.image" . }}
          imagePullPolicy: {{ .Values.httpCache.image.pullPolicy }}
          {{- if .Values.httpCache.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.httpCache.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.httpCache.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/sh
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.httpCache.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.args "context" $) | nindent 12 }}
          {{ else }}
          args:
            - -ec
            - |
              /entrypoint.sh
          {{- end }}
          env:
            {{- include "carto._utils.generateSecretDefs" (dict "vars" (list "VARNISH_PURGE_SECRET" "VARNISH_DEBUG_SECRET") "context" $ ) | nindent 12 }}
            {{- if .Values.httpCache.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "carto.httpCache.configmapName" . }}
            {{- $secretContent := include "carto._utils.generateSecretObjects" (dict "vars" (list "VARNISH_PURGE_SECRET" "VARNISH_DEBUG_SECRET") "context" $ ) -}}
            {{- if $secretContent }}
            - secretRef:
                name: {{ include "carto.httpCache.secretName" . }}
            {{- end }}
            {{- if .Values.httpCache.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.httpCache.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.httpCache.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.httpCache.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.httpCache.resources }}
          resources: {{- toYaml .Values.httpCache.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.httpCache.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.httpCache.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.httpCache.livenessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- else if .Values.httpCache.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.httpCache.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.httpCache.readinessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- else if .Values.httpCache.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.httpCache.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.httpCache.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- else if .Values.httpCache.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.httpCache.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          {{- if .Values.httpCache.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.httpCache.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.httpCache.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
        {{- if .Values.httpCache.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
