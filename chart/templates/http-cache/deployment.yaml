{{- if and (include "carto.baseUrl" .) (eq .Values.appConfigValues.httpCacheEnabled "true") }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.httpCache.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/component: http-cache
    app.kubernetes.io/instance: carto
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carto
    helm.sh/chart: carto-1.104.2
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.httpCache.replicaCount }}
  {{- if .Values.httpCache.updateStrategy }}
  strategy: {{- toYaml .Values.httpCache.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/component: http-cache
      app.kubernetes.io/instance: carto
      app.kubernetes.io/name: carto
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/http-cache/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/http-cache/secret.yaml") . | sha256sum }}
        {{- if .Values.httpCache.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels:
        app.kubernetes.io/component: http-cache
        app.kubernetes.io/instance: carto
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: carto
        helm.sh/chart: carto-1.104.2
        {{- if .Values.httpCache.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "carto.httpCache.serviceAccountName" . }}
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.httpCache.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.httpCache.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.httpCache.podAffinityPreset "component" "httpCache" "context" $) | nindent 10 }}
        podAntiAffinity:
          app.kubernetes.io/component: httpCache
          app.kubernetes.io/instance: carto
          app.kubernetes.io/name: carto
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.httpCache.nodeAffinityPreset.type "key" .Values.httpCache.nodeAffinityPreset.key "values" .Values.httpCache.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.httpCache.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.httpCache.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.httpCache.priorityClassName }}
      priorityClassName: {{ .Values.httpCache.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.httpCache.schedulerName }}
      schedulerName: {{ .Values.httpCache.schedulerName | quote }}
      {{- end }}
      {{- if .Values.httpCache.podSecurityContext.enabled }}
      securityContext:
        fsGroup: 102
        supplementalGroups:
        - 2345
      {{- end }}
      {{- if not .Values.diagnosticMode.enabled }}
      initContainers:
        {{- if .Values.internalPostgresql.enabled }}
        {{ include "carto.postgresql-init-container" (dict "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.httpCache.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.httpCache.terminationGracePeriodSeconds }}
      containers:
      - args:
        - -ec
        - |
          /entrypoint.sh
        command:
        - /bin/sh
        envFrom:
        - configMapRef:
            name: carto-http-cache
        - secretRef:
            name: carto-http-cache
        image: {{ template "carto.httpCache.image" . }}
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 15 && kill -TERM $(pidof varnishd)
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 5
        name: http-cache
        ports:
        - containerPort: 6081
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 5
        {{- if .Values.httpCache.resources }}
        resources: {{- toYaml .Values.httpCache.resources | nindent 10 }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - all
          runAsGroup: 101
          runAsNonRoot: false
          runAsUser: 101
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - name: shared-data
            mountPath: /var/lib/varnish
        env:
        - name: VARNISH_HTTP_PORT
          value: "6081"
        - name: HTTP_CACHE_WORKING_PATH
          value: "/var/lib/varnish"
        {{- if .Values.httpCache.extraEnvVars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.httpCache.extraEnvVars "context" $) | nindent 8 }}
        {{- end }}
      - name: exporter
        image: gcr.io/carto-onprem-artifacts/varnish-exporter:latest
        volumeMounts:
          - name: shared-data
            mountPath: /var/lib/varnish
        ports:
        - containerPort: 9131
          name: prometheus
        {{- if .Values.httpCache.resources }}
        resources: {{- toYaml .Values.httpCache.resources | nindent 10 }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - all
          runAsGroup: 101
          runAsNonRoot: false
          runAsUser: 0
      volumes:
        - name: shared-data
          emptyDir: {}
      shareProcessNamespace: true
{{- end }}
