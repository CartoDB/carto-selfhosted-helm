{{- if and (.Values.appConfigValues.aiFeaturesEnabled) (not .Values.cartoConfigValues.onlyRunRouter) }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.llmProxy.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: llmproxy
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.llmProxy.replicaCount }}
  {{- if .Values.llmProxy.updateStrategy }}
  strategy: {{- toYaml .Values.llmProxy.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: llmproxy
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/llmproxy/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/llmproxy/secret.yaml") . | sha256sum }}
        checksum/masterKeyChecksum: {{ include "carto.llmProxy.masterKeyChecksum" . | sha256sum }}
        checksum/saltKeyChecksum: {{ include "carto.llmProxy.saltKeyChecksum" . | sha256sum }}
        checksum/postgresql-password: {{ include "carto.postgresql.passwordChecksum" . }}
        checksum/redis-password: {{ include "carto.redis.passwordChecksum" . }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- if .Values.llmProxy.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: llmproxy
        {{- if .Values.llmProxy.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "carto.commonSA.serviceAccountName" . }}
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.llmProxy.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.llmProxy.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.llmProxy.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.llmProxy.podAffinityPreset "component" "llmProxy" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.llmProxy.podAntiAffinityPreset "component" "llmProxy" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.llmProxy.nodeAffinityPreset.type "key" .Values.llmProxy.nodeAffinityPreset.key "values" .Values.llmProxy.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.llmProxy.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.llmProxy.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.llmProxy.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.llmProxy.priorityClassName }}
      priorityClassName: {{ .Values.llmProxy.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.llmProxy.schedulerName }}
      schedulerName: {{ .Values.llmProxy.schedulerName | quote }}
      {{- end }}
      {{- if .Values.llmProxy.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.llmProxy.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if not .Values.diagnosticMode.enabled }}
      initContainers:
        {{- if .Values.llmProxy.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.llmProxy.terminationGracePeriodSeconds }}
      containers:
        - name: llmproxy
          image: {{ template "carto.llmProxy.image" . }}
          imagePullPolicy: {{ .Values.llmProxy.image.pullPolicy }}
          {{- if .Values.llmProxy.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.llmProxy.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.llmProxy.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.llmProxy.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.postgresql.secretName" . }}
                  key: {{ include "carto.postgresql.secret.key" . }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.redis.secretName" . }}
                  key: {{ include "carto.redis.existingsecret.key" . }}
            {{- include "carto._utils.generateSecretDefs" (dict "vars" (list
                "LITELLM_MASTER_KEY"
                "LITELLM_SALT_KEY"
                "OPENAI_API_KEY"
                "GEMINI_API_KEY"
                "LITELLM_JWT_SECRET"
             ) "context" $ ) | nindent 12 }}
            {{- if .Values.llmProxy.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "carto.llmProxy.configmapName" . }}
            {{- $secretContent := include "carto._utils.generateSecretObjects" (dict "vars" (list
                "LITELLM_MASTER_KEY"
                "LITELLM_SALT_KEY"
                "OPENAI_API_KEY"
                "GEMINI_API_KEY"
                "LITELLM_JWT_SECRET"
             ) "context" $ ) -}}
            {{- if $secretContent }}
            - secretRef:
                name: {{ include "carto.llmProxy.secretName" . }}
            {{- end }}
            {{- if .Values.llmProxy.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.llmProxy.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.llmProxy.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.llmProxy.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.llmProxy.resources }}
          resources: {{- toYaml .Values.llmProxy.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.llmProxy.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.llmProxy.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.llmProxy.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/liveliness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.llmProxy.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.llmProxy.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.llmProxy.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/readiness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.llmProxy.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.llmProxy.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.llmProxy.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/liveliness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.llmProxy.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.llmProxy.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: prisma-cache
              mountPath: /app/.cache/prisma
            - name: tmp-dir
              mountPath: /tmp
            {{- if and (.Values.externalPostgresql.sslEnabled) (.Values.externalPostgresql.sslCA) }}
            - name: postgresql-ssl-ca
              mountPath: {{ include "carto.postgresql.configMapMountAbsolutePath" . }}
              subPath: {{ include "carto.postgresql.configMapMountFilename" . }}
              readOnly: true
            {{- end }}
            {{- if .Values.llmProxy.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.llmProxy.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        # Required for read-only filesystem
        - name: prisma-cache
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        {{- if and (.Values.externalPostgresql.sslEnabled) (.Values.externalPostgresql.sslCA) }}
        - name: postgresql-ssl-ca
          configMap:
            name: {{ include "carto.postgresql.configMapName" . }}
            items:
              - key: {{ include "carto.postgresql.configMapMountFilename" . }}
                path: {{ include "carto.postgresql.configMapMountFilename" . }}
        {{- end }}
        {{- if .Values.llmProxy.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.llmProxy.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
