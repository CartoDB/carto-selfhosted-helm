{{- if and (.Values.litellm.enabled) (not .Values.cartoConfigValues.onlyRunRouter) }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.litellm.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: litellm
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.litellm.replicaCount }}
  {{- if .Values.litellm.updateStrategy }}
  strategy: {{- toYaml .Values.litellm.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: litellm
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/litellm/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/litellm/secret.yaml") . | sha256sum }}
        checksum/masterKeyChecksum: {{ include "carto.litellm.masterKeyChecksum" . | sha256sum }}
        checksum/saltKeyChecksum: {{ include "carto.litellm.saltKeyChecksum" . | sha256sum }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- if .Values.litellm.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: litellm
        {{- if .Values.litellm.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "carto.commonSA.serviceAccountName" . }}
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.litellm.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.litellm.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.litellm.podAffinityPreset "component" "litellm" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.litellm.podAntiAffinityPreset "component" "litellm" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.litellm.nodeAffinityPreset.type "key" .Values.litellm.nodeAffinityPreset.key "values" .Values.litellm.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.litellm.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.litellm.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.priorityClassName }}
      priorityClassName: {{ .Values.litellm.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.litellm.schedulerName }}
      schedulerName: {{ .Values.litellm.schedulerName | quote }}
      {{- end }}
      {{- if .Values.litellm.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.litellm.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if not .Values.diagnosticMode.enabled }}
      initContainers:
        {{- if .Values.litellm.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.litellm.terminationGracePeriodSeconds }}
      containers:
        - name: litellm
          image: {{ template "carto.litellm.image" . }}
          imagePullPolicy: {{ .Values.litellm.image.pullPolicy }}
          {{- if .Values.litellm.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.litellm.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.litellm.command }}
          command:
            {{- include "common.tplvalues.render" (dict "value" .Values.litellm.command "context" $) | nindent 10 }}
          {{- else }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Construct DATABASE_URL from the individual environment variables
              export DATABASE_URL="postgresql://$DATABASE_USERNAME:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME?sslmode=${DATABASE_SSL_MODE}"{{- if include "carto.litellm.database.sslCA" . }}&sslrootcert=${DATABASE_SSL_PATH}{{- end }}""
              # Construct REDIS_URL from the individual environment variable
              export REDIS_URL="{{- if .Values.litellm.redis.enableTls -}}rediss{{- else -}}redis{{- end -}}://:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT/$REDIS_DB{{ if .Values.litellm.redis.enableTls }}&ssl_cert_reqs={{ .Values.litellm.redis.sslCertReqs }}{{ end }}"
              # Start the litellm application with config
              exec litellm --config /app/config.yaml
          {{- end }}
          {{- if .Values.litellm.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: DATABASE_HOST
              value: {{ include "carto.litellm.databaseHost" . | quote }}
            - name: DATABASE_USERNAME
              value: {{ include "carto.litellm.databaseUser" . | quote }}
            - name: DATABASE_NAME
              value: {{ include "carto.litellm.databaseDb" . | quote }}
            - name: DATABASE_PORT
              value: {{ include "carto.litellm.databasePort" . | quote }}
            - name: DATABASE_SSL_MODE
              value: {{ include "carto.litellm.databaseSslMode" . | quote }}
            {{- if include "carto.litellm.database.sslCA" . }}
            - name: DATABASE_SSL_PATH
              value: {{ include "carto.litellm.database.sslCA.configMapMountAbsolutePath" . | quote }}
            {{- end }}
            - name: REDIS_HOST
              value: {{ include "carto.litellm.redisHost" . | quote }}
            - name: REDIS_PORT
              value: {{ include "carto.litellm.redisPort" . | quote }}
            - name: REDIS_DB
              value: {{ include "carto.litellm.redisDb" . | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.litellm.databasePasswordSecretName" . }}
                  key: {{ include "carto.litellm.databasePasswordSecretKey" . }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.litellm.redisPasswordSecretName" . }}
                  key: {{ include "carto.litellm.redisPasswordSecretKey" . }}
            {{- include "carto._utils.generateSecretDefs" (dict "vars" (list
              "CARTO_SELFHOSTED_INSTANCE_ID"
              "ENCRYPTION_SECRET_KEY"
              "EXPORTS_S3_BUCKET_ACCESS_KEY_ID"
              "EXPORTS_S3_BUCKET_SECRET_ACCESS_KEY"
              "MAPS_API_V3_JWT_SECRET"
              "LITELLM_MASTER_KEY"
              "LITELLM_SALT_KEY"
             ) "context" $ ) | nindent 12 }}
            {{- if .Values.litellm.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "carto.litellm.configmapName" . }}
            {{- $secretContent := include "carto._utils.generateSecretObjects" (dict "vars" (list
              "CARTO_SELFHOSTED_INSTANCE_ID"
              "ENCRYPTION_SECRET_KEY"
              "EXPORTS_S3_BUCKET_ACCESS_KEY_ID"
              "EXPORTS_S3_BUCKET_SECRET_ACCESS_KEY"
              "MAPS_API_V3_JWT_SECRET"
              "LITELLM_MASTER_KEY"
              "LITELLM_SALT_KEY"
             ) "context" $ ) -}}
            {{- if $secretContent }}
            - secretRef:
                name: {{ include "carto.litellm.secretName" . }}
            {{- end }}
            {{- if .Values.litellm.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.litellm.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.litellm.resources }}
          resources: {{- toYaml .Values.litellm.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.litellm.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.litellm.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/liveliness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.litellm.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.litellm.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/readiness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.litellm.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.litellm.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /health/liveliness
              port: http
              httpHeaders:
                - name: Authorization
                  value: "Bearer {{ .Values.cartoSecrets.litellmMasterKey.value }}"
          {{- else if .Values.litellm.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.litellm.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: npm-cache-dir
              mountPath: /.npm
            - name: prisma-cache
              mountPath: /.cache
            - name: tmp-dir
              mountPath: /tmp
            {{- if include "carto.litellm.database.sslCA" . }}
            - name: postgresql-ssl-ca
              mountPath: {{ include "carto.litellm.database.sslCA.configMapMountAbsolutePath" . }}
              subPath: {{ include "carto.litellm.database.sslCA.configMapMountFilename" . }}
              readOnly: true
            {{- end }}
            {{- if .Values.litellm.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.litellm.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        # Required for read-only filesystem
        - name: npm-cache-dir
          emptyDir: {}
        - name: prisma-cache
          emptyDir: {}
        - name: tmp-dir
          emptyDir: {}
        {{- if include "carto.litellm.database.sslCA" . }}
        - name: postgresql-ssl-ca
          configMap:
            name: {{ include "carto.litellm.configmapName" . }}
            items:
              - key: {{ include "carto.litellm.database.sslCA.configMapMountFilename" . }}
                path: {{ include "carto.litellm.database.sslCA.configMapMountFilename" . }}
        {{- end }}
        {{- if .Values.litellm.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }} 