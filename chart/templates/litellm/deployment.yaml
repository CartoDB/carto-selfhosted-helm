{{- if and (include "carto.baseUrl" .) (not .Values.cartoConfigValues.onlyRunRouter) }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.litellm.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: litellm
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  # In order to publish the charts in official marketplaces, it's necessary that all components are able to start with default values without errors
  # Components which needs other configuration requirements such as client specific parameters should not boot if these values ​​are not provided
  {{- if .Values.cartoConfigValues.selfHostedTenantId }}
  replicas: {{ .Values.litellm.replicaCount }}
  {{- else }}
  replicas: 0
  {{- end }}
  {{- if .Values.litellm.updateStrategy }}
  strategy: {{- toYaml .Values.litellm.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: litellm
  template:
    metadata:
      {{- if .Values.litellm.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: litellm
        {{- if .Values.litellm.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.litellm.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.litellm.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.litellm.podAffinityPreset "component" "litellm" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.litellm.podAntiAffinityPreset "component" "litellm" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.litellm.nodeAffinityPreset.type "key" .Values.litellm.nodeAffinityPreset.key "values" .Values.litellm.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.litellm.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.litellm.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.priorityClassName }}
      priorityClassName: {{ .Values.litellm.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.litellm.schedulerName }}
      schedulerName: {{ .Values.litellm.schedulerName | quote }}
      {{- end }}
      {{- if .Values.litellm.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.litellm.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.litellm.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.litellm.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.litellm.initContainers }}
      initContainers: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ template "carto.litellm.image" . }}
          imagePullPolicy: {{ .Values.litellm.image.pullPolicy }}
          {{- if .Values.litellm.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.litellm.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.litellm.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.litellm.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.litellm.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "carto.litellm.configmapName" . }}
            - secretRef:
                name: {{ template "carto.litellm.secretName" . }}
            {{- if .Values.litellm.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.litellm.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.litellm.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.litellm.resources }}
          resources: {{- toYaml .Values.litellm.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.litellm.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.litellm.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.litellm.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ default "/health/liveliness" .Values.litellm.livenessProbe.path }}
              port: http
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.livenessProbe "enabled" "path") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.litellm.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.litellm.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ default "/health/readiness" .Values.litellm.readinessProbe.path }}
              port: http
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.readinessProbe "enabled" "path") "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.litellm.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.litellm.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ default "/health" .Values.litellm.startupProbe.path }}
              port: http
            {{- include "common.tplvalues.render" (dict "value" (omit .Values.litellm.startupProbe "enabled" "path") "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.litellm.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.litellm.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            {{- if .Values.litellm.config.enabled }}
            - name: config
              mountPath: /app/config.yaml
              subPath: config.yaml
              readOnly: true
            {{- end }}
          {{- if .Values.litellm.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.litellm.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.litellm.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        {{- if .Values.litellm.config.enabled }}
        - name: config
          configMap:
            name: {{ template "carto.litellm.configmapName" . }}
            items:
            - key: config.yaml
              path: config.yaml
        {{- end }}
      {{- if .Values.litellm.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.litellm.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
{{- end }} 