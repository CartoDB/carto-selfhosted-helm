CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

{{/* TODO: We should provide some type of link to the repo to redirect the people that only uses helm to the official documentation */}}

{{- if  or (.Values.postgresql.enabled) (.Values.redis.enabled) }}
                                                   
                                                   
                                                   
 +-++-++-+ +-++-++-+ +-++-++-++-++-++-++-++-++-++-+
 |N||O||T| |F||O||R| |P||R||O||D||U||C||T||I||O||N|
 +-++-++-+ +-++-++-+ +-++-++-++-++-++-++-++-++-++-+
                                                   
                                                   
                                                   

WARNING: You are using a non production installation, please see External Postgres and External Redis steps in documentation guide to enable Production Mode.

{{- end }}

** Please be patient while the chart is being deployed **

{{- if .Values.diagnosticMode.enabled }}

The chart has been deployed in diagnostic mode. All probes have been disabled and the command has been overwritten with:

  command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
  args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}

Get the list of pods by executing:

  kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

Access the pod you want to debug by executing

  kubectl exec --namespace {{ .Release.Namespace }} -ti <NAME OF THE POD> -- sh

{{- else }}
{{/* The CARTO team should check if this should be an error instead of a Warning */}}
{{- if or (contains "FILL_ME" .Values.commonConfiguration) (contains "FILL_ME" .Values.commonSecretConfiguration) }}

WARNING: There are values in the CARTO configuration that you did not set according to the documentation. This may cause issues in the deployment. Please review the configuration.

{{- if (contains "FILL_ME" .Values.commonConfiguration) }}

Found these lines in commonConfiguration:
{{ $lines := regexFindAll ".*FILL_ME.*" .Values.commonConfiguration -1 }}
{{- range $lines }}
{{ . }}
{{- end }}
{{- end }}

{{- if (contains "FILL_ME" .Values.commonSecretConfiguration) }}

Found these lines in commonSecretConfiguration:
{{ $lines := regexFindAll ".*FILL_ME.*" .Values.commonSecretConfiguration -1 }}
{{- range $lines }}
{{ . }}
{{- end }}
{{- end }}
{{- end }}

{{- $baseUrl := (include "carto.baseUrl" .) -}}
{{- $postgresqlSecretName := include "carto.postgresql.secretName" . -}}
{{- $redisSecretName := include "carto.redis.secretName" . -}}
{{- if not $baseUrl }}
###############################################################################
### ERROR: You did not provide an on premises URL in your 'helm install' call ###
###############################################################################

This deployment will be incomplete until you configure CARTO with a resolvable
host. To configure CARTO with the URL of your service:

1. Edit the config field `customConfigValues.selfHostedDomain`

2. Complete your CARTO deployment reading the `Update` section of the documentation.

{{- else }}

1. Get the CARTO URL by running:

{{- if eq .Values.router.service.type "ClusterIP" }}
{{- $port := default 80 .Values.router.service.ports.http | toString }}
{{- $port_https := default 443 .Values.router.service.ports.https | toString }}
  {{/* TODO: We should check that HTTPS should be enabled ! */}}

  export CARTO_HOST_IP=127.0.0.1
  export CARTO_PORT={{- $port }}
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "carto.router.fullname" . }} {{ $port }}:{{ $port }} {{ $port_https }}:{{ $port_https }}

  If the previous command fails regarding port permissions, try the next ones:
  export CARTO_KUBECONFIG=$([[ ! -z "$KUBECONFIG" ]] && echo "$KUBECONFIG" || echo "$HOME/.kube/config")
  sudo -E kubectl --kubeconfig=${CARTO_KUBECONFIG} port-forward --namespace {{ .Release.Namespace }} svc/{{ include "carto.router.fullname" . }} {{ $port }}:{{ $port }} {{ $port_https }}:{{ $port_https }}

{{- else if eq .Values.router.service.type "NodePort" }}

  export CARTO_HOST_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  export CARTO_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "common.names.fullname" . }})
{{- else if eq .Values.router.service.type "LoadBalancer" }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ include "carto.router.fullname" . }}'

  export CARTO_HOST_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "carto.router.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress.*.ip}')

  export CARTO_HOST_CNAME=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "carto.router.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress.*.hostname}')

{{- else }}

  echo URL  : {{ $baseUrl }}

{{- end }}

2. Add the `CARTO_HOST_IP` (An 'A' record) or your `CARTO_HOST_CNAME` (A 'CNAME' record) to your DNS or to `/etc/hosts` pointing to the domain `{{ $baseUrl }}`. Remember that CARTO only works with a domain and accessing (from the final client) using https.

{{- end  }}

{{ include "carto.validateValues" . }}
{{- end }}
