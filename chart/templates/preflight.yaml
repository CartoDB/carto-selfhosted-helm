apiVersion: v1
kind: Secret
metadata:
  labels:
    troubleshoot.sh/kind: preflight
  name: {{ .Release.Name }}-preflight-config
  namespace: {{ .Release.Namespace | quote }}
stringData:
  preflight.yaml: |
    apiVersion: troubleshoot.sh/v1beta2
    kind: Preflight
    metadata:
      name: preflight-sample
    spec:
      collectors:
        - postgres:
            collectorName: workspace-db
            uri: postgresql://{{ include "carto.postgresql.adminUser" . | trimAll "\"" }}:{{ .Values.externalPostgresql.adminPassword }}@{{ include "carto.postgresql.host" . | trimAll "\"" }}:{{ include "carto.postgresql.port" . | trimAll "\"" }}/{{ include "carto.postgresql.adminDatabase" . | trimAll "\"" }}
        {{- if not .Values.internalRedis }}
        - redis:
            collectorName: redis
            uri: redis://default:{{ .Values.externalRedis.password }}@{{ include "carto.redis.host" . | trimAll "\"" }}:{{ include "carto.redis.port" . | trimAll "\"" }}
        {{- end }}
        - registryImages:
            images:
              - {{ template "carto.accountsWww.image" . }}
              - {{ template "carto.cdnInvalidatorSub.image" . }}
              - {{ template "carto.httpCache.image" . }}
              - {{ template "carto.importApi.image" . }}
              - {{ template "carto.importWorker.image" . }}
              - {{ template "carto.ldsApi.image" . }}
              - {{ template "carto.mapsApi.image" . }}
              - {{ template "carto.notifier.image" . }}
              - {{ template "carto.router.image" . }}
              - {{ template "carto.sqlWorker.image" . }}
              - {{ template "carto.workspaceApi.image" . }}
              - {{ template "carto.workspaceMigrations.image" . }}
              - {{ template "carto.workspaceSubscriber.image" . }}
              - {{ template "carto.workspaceWww.image" . }}
      analyzers:
        - postgres:
            checkName: PostgreSQL is available
            collectorName: workspace-db
            outcomes:
              - fail:
                  when: connected == false
                  message: Cannot connect to PostgreSQL server
              - pass:
                  when: connected == true
                  message: The PostgreSQL server is available
        - postgres:
            checkName: PostgreSQL must be v11.x or later
            collectorName: workspace-db
            outcomes:
              - fail:
                  when: version < 11.x
                  message: The PostgreSQL server must be at least version 11
              - pass:
                  message: The PostgreSQL version is ready
        {{- if not .Values.internalRedis }}
        - jsonCompare:
            checkName: Required Redis status
            fileName: redis/redis.json
            path: "isConnected"
            value: |
              true
            outcomes:
              - fail:
                  # when: "false"
                  message: Redis couldn't be accessed.
              - pass:
                  # when: "true"
                  message: Redis looks good.
        {{- end }}
        - clusterVersion:
            outcomes:
              - fail:
                  when: "< 1.20.0"
                  message: The application requires Kubernetes 1.20.0 or later, and recommends 1.21.0 or later.
                  uri: https://www.kubernetes.io
              - warn:
                  when: "< 1.21.0"
                  message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.21.0 or later.
                  uri: https://kubernetes.io
              - pass:
                  message: Your cluster meets the recommended and required versions of Kubernetes.
        - containerRuntime:
            outcomes:
              - pass:
                  when: "== containerd"
                  message: containerd container runtime was found.
              - fail:
                  message: Did not find containerd container runtime.
        - distribution:
            outcomes:
              - fail:
                  when: "== docker-desktop"
                  message: The application does not support Docker Desktop clusters.
              - fail:
                  when: "== microk8s"
                  message: The application does not support MicroK8s clusters.
              - fail:
                  when: "== minikube"
                  message: The application does not support minikube clusters.
              - pass:
                  when: "== eks"
                  message: EKS is a supported distribution.
              - pass:
                  when: "== gke"
                  message: GKE is a supported distribution.
              - pass:
                  when: "== aks"
                  message: AKS is a supported distribution.
              # Will be supported in the future
              - pass:
                  when: "== kurl"
                  message: kURL is a supported distribution.
              - pass:
                  when: "== digitalocean"
                  message: DigitalOcean is a supported distribution.
              - warn:
                  message: Unable to determine the distribution of Kubernetes.
        - nodeResources:
            checkName: Total CPU Cores
            outcomes:
              - fail:
                  when: "sum(cpuCapacity) < 2"
                  message: The cluster must contain at least 2 cores, and should contain at least 4 cores.
              - warn:
                  when: "sum(cpuCapacity) < 4"
                  message: The cluster should contain at least 4 cores.
              - pass:
                  message: There are at least 4 cores in the cluster.
        - registryImages:
            checkName: Carto Registry Images
            outcomes:
              - fail:
                  when: "missing > 0"
                  message: Images are missing from registry
              - warn:
                  when: "errors > 0"
                  message: Failed to check if images are present in registry
              - pass:
                  message: All Carto images are availables
