{{- if (include "carto.baseUrl" .) }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "carto.ldsApi.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: lds-api
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.ldsApi.replicaCount }}
  {{- if .Values.ldsApi.updateStrategy }}
  strategy: {{- toYaml .Values.ldsApi.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: lds-api
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/lds-api/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/lds-api/secret.yaml") . | sha256sum }}
        {{- if .Values.ldsApi.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: lds-api
        {{- if .Values.ldsApi.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "carto.ldsApi.serviceAccountName" . }}
      {{- include "carto.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.ldsApi.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.ldsApi.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.ldsApi.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.ldsApi.podAffinityPreset "component" "lds-api" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.ldsApi.podAntiAffinityPreset "component" "lds-api" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.ldsApi.nodeAffinityPreset.type "key" .Values.ldsApi.nodeAffinityPreset.key "values" .Values.ldsApi.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.ldsApi.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.ldsApi.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.ldsApi.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.ldsApi.priorityClassName }}
      priorityClassName: {{ .Values.ldsApi.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.ldsApi.schedulerName }}
      schedulerName: {{ .Values.ldsApi.schedulerName | quote }}
      {{- end }}
      {{- if .Values.ldsApi.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.ldsApi.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if not .Values.diagnosticMode.enabled }}
      initContainers:
        {{- if .Values.internalPostgresql.enabled }}
        {{ include "carto.postgresql-init-container" (dict "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.internalRedis.enabled }}
        {{ include "carto.redis-init-container" . | nindent 8 }}
        {{- end }}
        {{- if .Values.ldsApi.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: lds-api
          image: {{ template "carto.ldsApi.image" . }}
          imagePullPolicy: {{ .Values.ldsApi.image.pullPolicy }}
          {{- if .Values.ldsApi.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.ldsApi.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.ldsApi.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/sh
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.ldsApi.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.args "context" $) | nindent 12 }}
          {{ else }}
          args:
            - -ec
            - |
              npm run start:built
          {{- end }}
          env:
            - name: WORKSPACE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.postgresql.secretName" . }}
                  key: {{ include "carto.postgresql.secret.key" . }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "carto.redis.secretName" . }}
                  key: {{ include "carto.redis.existingsecret.key" . | quote }}
            {{- include "carto._utils.generateSecretDefs" (dict "vars" (list "ENCRYPTION_SECRET_KEY") "context" $ ) | nindent 12 }}
            {{- if .Values.ldsApi.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if not .Values.ldsApi.existingConfigMap }}
            - configMapRef:
                name: {{ template "carto.ldsApi.fullname" . }}
            {{- end }}
            {{- if .Values.ldsApi.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.ldsApi.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.ldsApi.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.ldsApi.extraEnvVarsSecret "context" $) }}
            {{- end }}
            {{- $secretContent := include "carto._utils.generateSecretObjects" (dict "vars" (list "ENCRYPTION_SECRET_KEY") "context" $ ) -}}
            {{- if $secretContent }}
            - secretRef:
                name: {{ include "carto.ldsApi.secretName" . }}
            {{- end }}
          {{- if .Values.ldsApi.resources }}
          resources: {{- toYaml .Values.ldsApi.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.ldsApi.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.ldsApi.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ldsApi.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v3/lds/
              port: http
          {{- else if .Values.ldsApi.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.ldsApi.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ldsApi.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v3/lds/
              port: http
          {{- else if .Values.ldsApi.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.ldsApi.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.ldsApi.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /v3/lds/
              port: http
          {{- else if .Values.ldsApi.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.customStartupProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.ldsApi.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: gcp-default-service-account-key
              mountPath: {{ include "carto.google.secretMountDir" . }}
              readOnly: true
            {{- if and .Values.externalPostgresql.sslEnabled .Values.externalPostgresql.sslCA }}
            - name: postgresql-ssl-ca
              mountPath: {{ include "carto.postgresql.configMapMountDir" . }}
              readOnly: true
            {{- end }}
            {{- if and .Values.externalRedis.tlsEnabled .Values.externalRedis.tlsCA }}
            - name: redis-tls-ca
              mountPath: {{ include "carto.redis.configMapMountDir" . }}
              readOnly: true
            {{- end }}
          {{- if .Values.ldsApi.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.ldsApi.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.ldsApi.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: gcp-default-service-account-key
          secret:
            secretName: {{ include "carto.google.secretName" . }}
            items:
              - key: {{ include "carto.google.secretKey" . }}
                path: {{ include "carto.google.secretMountFilename" . }}
        {{- if and .Values.externalPostgresql.sslEnabled .Values.externalPostgresql.sslCA }}
        - name: postgresql-ssl-ca
          configMap:
            name: {{ include "carto.postgresql.configMapName" . }}
        {{- end }}
        {{- if and .Values.externalRedis.tlsEnabled .Values.externalRedis.tlsCA }}
        - name: redis-tls-ca
          configMap:
            name: {{ include "carto.redis.configMapName" . }}
        {{- end }}
        {{- if .Values.ldsApi.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ldsApi.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
