name: 'VIB'
on: # rebuild any PRs and main branch changes
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
    branches:
      - main
    paths-ignore:
      - '**.md'
env:
  CSP_API_URL: https://console.cloud.vmware.com
  CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
  VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
  GCP_BUCKET_TMP_FILES: carto-github-ci-selfhosted-helm-tmp-transfer
  CARTO_CLONE_PATH: carto-sources
  SIGNED_URL_DURATION: 2h
  # SIGNED_URL_DURATION: 5m
  WORKSPACE_DOMAIN: carto.vmw
jobs:
  vib-verify: # verify in multiple target platforms
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.labels.*.name, 'verify') }}
    strategy:
      matrix:
        vib_test_file:
          - vib-platform-verify.json
        platform:
          # - target-platform: eks
          #   target-platform-id: ef54a736-5e43-4a6c-9400-b162acd8b83d
          #   onprem-id: vmware-eks-1
          - target-platform: gke
            target-platform-id: 91d398a2-25c4-4cda-8732-75a3cfc179a1
            onprem-id: vmware-gke-1
            # onprem-id: bitnami-stag-1
          # - target-platform: aks
          #   target-platform-id: 7b13a7bb-011c-474f-ad71-8152fc321b9e
          #   onprem-id: vmware-aks-1
      fail-fast: false
      max-parallel: 1
    env:
      ONPREM_ID: "${{ matrix.platform.onprem-id }}"
      # ENVIRONMENT: "production"
      ENVIRONMENT: "staging"
    concurrency:
      # Avoid multiple jobs running with the same customer package
      group: "onp-${{ matrix.platform.onprem-id }}"
      cancel-in-progress: false
    name: "Verify ${{ matrix.platform.target-platform }}: ${{ matrix.vib_test_file }}"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
      - name: Install Google command line
        uses: google-github-actions/setup-gcloud@v0
        # with:
        #   project_id: ${{ env.ARTIFACTS_PROJECT_ID }}
        #   version: ${{ env.GCLOUD_VERSION }}
      - name: Retrieve secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          ## Role required: roles/secretmanager.secretAccessor
          # yamllint disable rule:line-length
          secrets: |-
            package-carto-values:projects/carto-tnt-onp-${{ env.ONPREM_ID }}/secrets/selfhosted-k8s-customer-package
            package-carto-secrets:projects/carto-tnt-onp-${{ env.ONPREM_ID }}/secrets/selfhosted-k8s-customer-package-secrets
            e2e-secrets:projects/carto-terraform-ci-cd/secrets/github-carto3-e2e-secrets-${{ env.ENVIRONMENT }}
          # yamllint enable
      - name: Set up yq
        uses: frenck/action-setup-yq@v1
      - name: Retrieve chart info
        id: info
        shell: bash
        run: |
          set -ex
          echo "::set-output name=carto_version::$(yq .appVersion chart/Chart.yaml)"
          echo "::set-output name=custom_run_id::${{ github.repository }}:${{ github.run_id }}[${{ github.run_attempt }}](${{ matrix.platform.target-platform }}_onp-${{ matrix.platform.onprem-id }})"
      - name: Clone cloud-native
        uses: actions/checkout@v3
        with:
          ref: '${{ steps.info.outputs.carto_version }}'
          repository: 'CartoDB/cloud-native'
          token: '${{ secrets.X_GITHUB_CARTOFANTE }}'
          path: '${{ env.CARTO_CLONE_PATH }}'
          persist-credentials: 'false'
      - name: Package E2E tests from cloud-native
        id: e2e-package
        shell: bash
        env:
          E2E_SECRETS: ${{ steps.secrets.outputs.e2e-secrets }}
        run: |
          # shellcheck disable=SC2002,SC2129
          set -ex

          ### Basic Info
          du -sh "${CARTO_CLONE_PATH}/workspace-www"
          cd "${CARTO_CLONE_PATH}/workspace-www"
          git status

          ### Edit workspace-www folder

          ## Generate .env to use
          # shellcheck disable=SC2002,SC2129
          cat "environments/${{ env.ENVIRONMENT }}.env" >> .env

          echo "CYPRESS_BASE_URL=https://${WORKSPACE_DOMAIN}" >> .env
          echo "CYPRESS_WORKSPACE_URL=https://${WORKSPACE_DOMAIN}" >> .env
          echo "CYPRESS_TENANT_ID=onp-${{ env.ONPREM_ID }}" >> .env
          echo "CYPRESS_RUN_ID=${{ steps.info.outputs.custom_run_id }}" >> .env

          echo "${E2E_SECRETS}" >> .env

          echo "::group::.env to use"
          cat .env
          echo "::endgroup::"

          ## Create some github action outputs based in the .env content
          set +x
          # shellcheck disable=SC2002,SC2129
          CYPRESS_RUN_ID="$(cat .env | grep -e '^CYPRESS_RUN_ID=' | tail -n 1 | sed 's|^CYPRESS_RUN_ID=||g')"
          # shellcheck disable=SC2002,SC2129
          CYPRESS_PROJECT_ID="$(cat .env | grep -e '^CYPRESS_PROJECT_ID=' | tail -n 1 | sed 's|^CYPRESS_PROJECT_ID=||g')"
          echo "::add-mask::${CYPRESS_PROJECT_ID}"
          # shellcheck disable=SC2002,SC2129
          CYPRESS_RECORD_KEY="$(cat .env | grep -e '^CYPRESS_RECORD_KEY=' | tail -n 1 | sed 's|^CYPRESS_RECORD_KEY=||g')"
          echo "::add-mask::${CYPRESS_RECORD_KEY}"
          set -x
          sleep 1s
          echo "::set-output name=cypress-run-id::${CYPRESS_RUN_ID}"
          echo "::set-output name=cypress-project-id::${CYPRESS_PROJECT_ID}"
          echo "::set-output name=cypress-record-key::${CYPRESS_RECORD_KEY}"

          ## Edit cypress.json config
          # jq --arg CYPRESS_PROJECT_ID "a5p55t" '.projectId = $CYPRESS_PROJECT_ID' cypress.json > cypress.json.edited
          jq --arg CYPRESS_PROJECT_ID "${CYPRESS_PROJECT_ID}" '.projectId = $CYPRESS_PROJECT_ID' cypress.json > cypress.json.edited
          mv -f cypress.json.edited cypress.json

          echo "::group::cypress.json to use"
          cat cypress.json
          echo "::endgroup::"

          ## Generate package-lock.json from yarn.lock, required by Cypress into VIB
          npm install -g synp
          yarn ##### <-------------- We should find a way to delete it
          synp --source-file ./yarn.lock
          rm -rf node_modules/

          ## [Not working] Create a dummy repo to add more information to Cypress dashboard
          git init
          git config user.name "VIB from carto-selfhosted-helm repo"
          git config user.email johndoe@example.com
          touch .gitignore
          cat ../.gitignore >> .gitignore
          git add -A
          git commit -m "External execution: \`${{ steps.info.outputs.custom_run_id }}\`" > /dev/null

          ## Compress workspace-www, upload to gcs and generate a signed URL
          WORKSPACE_WWW_FILE_NAME=cloud-native-workspace-www-$(date '+%s').tar.gz

          tar -czf "../${WORKSPACE_WWW_FILE_NAME}" .
          cd ..
          ls -alh "${WORKSPACE_WWW_FILE_NAME}"
          gsutil -m cp "${WORKSPACE_WWW_FILE_NAME}" "gs://${GCP_BUCKET_TMP_FILES}/"
          set +x
          SIGNED_URL="$(gsutil signurl --use-service-account -d "${SIGNED_URL_DURATION}" "gs://${GCP_BUCKET_TMP_FILES}/${WORKSPACE_WWW_FILE_NAME}" | awk -F '\t' '{print $4}' | tail -n 1)"
          echo "::add-mask::${SIGNED_URL}"
          set -x
          sleep 1s
          echo "::set-output name=workspace-www-source-url::${SIGNED_URL}"

      - name: Generate Helm customization config
        id: helm_customization
        shell: bash
        env:
          PACKAGE_CARTO_VALUES: ${{ steps.secrets.outputs.package-carto-values }}
          PACKAGE_CARTO_SECRETS: ${{ steps.secrets.outputs.package-carto-secrets }}
        run: |
          set -ex

          ## Create Carto packages provided to clients as files
          echo "${PACKAGE_CARTO_VALUES}" > carto-values.yaml
          echo "${PACKAGE_CARTO_SECRETS}" > carto-secrets.yaml

          ## Add some customization like the domain
          cat << EOF > manual_customizations.yaml
          appConfigValues:
            selfHostedDomain: "${{ env.WORKSPACE_DOMAIN }}"
          EOF

          ## Merge all yamls config required to deploy the Helm package
          # shellcheck disable=SC2016
          yq eval-all '. as $item ireduce ({}; . * $item )' \
            customizations/service_loadBalancer/config.yaml \
            customizations/scale_components/static.yaml \
            customizations/resources/minimum.yaml \
            carto-values.yaml \
            carto-secrets.yaml \
            manual_customizations.yaml \
            > vib_helm_package.yaml

          echo "::group::Helm customization generated"
          cat vib_helm_package.yaml
          echo "::endgroup::"

          ## Transform the customization generated to base64
          set +x
          HELM_CUSTOMIZATION_BASE64=$(base64 -w 0 vib_helm_package.yaml)
          echo "::add-mask::${HELM_CUSTOMIZATION_BASE64}"
          sleep 1s
          set -x
          echo "::set-output name=helm-customization-base64::${HELM_CUSTOMIZATION_BASE64}"

      - name: Run validation in VIB platform
        uses: vmware-labs/vmware-image-builder-action@0.3.11
        with:
          pipeline: ${{ matrix.vib_test_file }}
          ## Currently disable by debug pourposes
          only-upload-on-failure: false
        env:
          VIB_ENV_TARGET_PLATFORM: ${{ matrix.platform.target-platform-id }}
          VIB_ENV_CARTO_RUNTIME_PARAMETERS: ${{ steps.helm_customization.outputs.helm-customization-base64 }}
          VIB_ENV_CYPRESS_RUN_ID: ${{ steps.e2e-package.outputs.cypress-run-id }}
          # VIB_ENV_CYPRESS_RECORD_KEY: ${{ secrets.VIB_ENV_CYPRESS_RECORD_KEY }}
          VIB_ENV_CYPRESS_RECORD_KEY: ${{ steps.e2e-package.outputs.cypress-record-key }}
          VIB_ENV_WORKSPACE_WWW_SOURCE_URL: ${{ steps.e2e-package.outputs.workspace-www-source-url }}

      - name: Clean up orgs & Auth0 users for E2E
        if: always()
        uses: ./carto-sources/.github/actions/tests-cleaning
        with:
          environment: ${{ env.ENVIRONMENT }}
          registry-service-account-base64: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
          secrets-service-account: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
          override-run-id: ${{ steps.info.outputs.custom_run_id }}
