name: 'VIB'
on: # rebuild any PRs and main branch changes
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
    branches:
      - main
    paths-ignore:
      - '**.md'
  # Revert before merge
  push:
env:
  CSP_API_URL: https://console.cloud.vmware.com
  CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
  VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
  CARTO_CLONE_PATH: carto-sources
  SIGNED_URL_DURATION: 1h
  # SIGNED_URL_DURATION: 5m
  WORKSPACE_DOMAIN: carto.vmw
jobs:
  vib-verify: # verify in multiple target platforms
    runs-on: ubuntu-latest
    # Revert before merge
    # if: ${{ contains(github.event.pull_request.labels.*.name, 'verify') }}
    strategy:
      matrix:
       include:
         - target-platform: gke
           target-platform-id: 91d398a2-25c4-4cda-8732-75a3cfc179a1
      fail-fast: false
    env:
      ONPREM_ID: "bitnami-stag-1"
      ENVIRONMENT: "staging"
    name: Verify ${{ matrix.target-platform}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
      - name: Install Google command line
        uses: google-github-actions/setup-gcloud@v0
        # with:
        #   project_id: ${{ env.ARTIFACTS_PROJECT_ID }}
        #   version: ${{ env.GCLOUD_VERSION }}
      - name: Retrieve secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          ## Role required: roles/secretmanager.secretAccessor
          # yamllint disable rule:line-length
          secrets: |-
            package-carto-values:projects/carto-tnt-onp-${{ env.ONPREM_ID }}/secrets/selfhosted-k8s-customer-package
            package-carto-secrets:projects/carto-tnt-onp-${{ env.ONPREM_ID }}/secrets/selfhosted-k8s-customer-package-secrets
            e2e-secrets:projects/carto-terraform-ci-cd/secrets/github-carto3-e2e-secrets-staging
          # GITHUB_PAT:projects/carto-terraform-ci-cd/secrets/xyz
          # yamllint enable
      - name: Set up yq
        uses: frenck/action-setup-yq@v1
      - name: Retrieve chart info
        id: info
        shell: bash
        run: |
          set -ex
          echo "::set-output name=carto_version::$(yq .appVersion chart/Chart.yaml)"
      - name: Clone cloud-native
        uses: actions/checkout@v3
        with:
          # ref: '${{ steps.info.outputs.carto_version }}'
          # ref: 'vib-cypress'
          ref: 'beltran-rubo-vib-cypress'
          repository: 'CartoDB/cloud-native'
          # repository: 'beltran-rubo/cloud-native'
          # token: '${{ steps.secrets.outputs.GITHUB_PAT }}'
          token: '${{ secrets.X_GITHUB_CARTOFANTE }}'
          path: '${{ env.CARTO_CLONE_PATH }}'
          persist-credentials: 'false'
      - name: Package E2E tests from cloud-native
        id: e2e-package
        shell: bash
        env:
          E2E_SECRETS: ${{ steps.secrets.outputs.e2e-secrets }}
        run: |
          set -ex

          ### Basic Info
          du -sh "${CARTO_CLONE_PATH}/workspace-www"
          cd "${CARTO_CLONE_PATH}/workspace-www"
          git status

          ### Edit workspace-www folder

            ## HotFix until we go against main
          cat .env | head -n 8 > .env.edited
          mv -f .env.edited .env
          # jq 'del(.projectId)' cypress.json > cypress.json.edited
          jq '.projectId = "ggohpq"' cypress.json > cypress.json.edited
          mv -f cypress.json.edited cypress.json
          #   ## BASEURL WITH PROTOCOL !
          # jq '.baseUrl = "https://carto.vmw"' cypress.json > cypress.json.edited
          # mv -f cypress.json.edited cypress.json
          #   ## Clean env.baseUrl to test
          # jq 'del(.env.baseUrl)' cypress.json > cypress.json.edited
          # mv -f cypress.json.edited cypress.json
          #   ## Add another host...
          # jq '.hosts."https://carto.vmw" = "{{TARGET_IP}}"' cypress.json > cypress.json.edited
          # mv -f cypress.json.edited cypress.json
          rm package-lock.json
            # End HotFix

          cat environments/${{ env.ENVIRONMENT }}.env >> .env

          echo "CYPRESS_WORKSPACE_URL=https://${WORKSPACE_DOMAIN}" >> .env
          # # echo "CYPRESS_BASE_URL=${WORKSPACE_DOMAIN}" >> .env
          # echo "CYPRESS_CI=true" >> .env
          # echo "CYPRESS_MEMORY=1" >> .env

            # Replace me
          echo "CYPRESS_TENANT_ID=onp-${{ env.ONPREM_ID }}" >> .env
          echo "CYPRESS_RUN_ID=vmware-mlr" >> .env
            # End Replace me
          
          echo "${E2E_SECRETS}" >> .env
          set +x
          CYPRESS_RECORD_KEY=$(cat .env | grep -e '^CYPRESS_RECORD_KEY=' | tail -n 1 | sed 's|^CYPRESS_RECORD_KEY=||g')
          echo "::add-mask::${CYPRESS_RECORD_KEY}"
          set -x
          sleep 1s
          echo "::set-output name=cypress-record-key::${CYPRESS_RECORD_KEY}"


          echo "::group::.env to use"
          cat .env
          echo "::endgroup::"

          WORKSPACE_WWW_FILE_NAME=cloud-native-workspace-www-$(date '+%s').tar.gz

          ## Generate package-lock.json, required by cypress into VIB
          npm install -g synp
          yarn ##### <-------------- We should find a way to delete it
          synp --source-file ./yarn.lock
          rm -rf node_modules/

          ## Compress and sign
          tar -czf ../${WORKSPACE_WWW_FILE_NAME} .
          cd ..
          ls -alh ${WORKSPACE_WWW_FILE_NAME}
          gsutil -m cp ${WORKSPACE_WWW_FILE_NAME} gs://mlr-testing-private/
          set +x
          SIGNED_URL="$(gsutil signurl --use-service-account -d ${SIGNED_URL_DURATION} gs://mlr-testing-private/${WORKSPACE_WWW_FILE_NAME} | awk -F '\t' '{print $4}' | tail -n 1)"
          echo "::add-mask::${SIGNED_URL}"
          set -x
          sleep 1s
          echo "::set-output name=workspace-www-source-url::${SIGNED_URL}"

      - name: Upload secrets to be able to debug
        shell: bash
        run: |
          set -ex

          set +x
          echo "${{ secrets.CARTO_RUNTIME_PARAMETERS }}" > CARTO_RUNTIME_PARAMETERS.env
          echo "${{ secrets.CARTO_RUNTIME_PARAMETERS_STG }}" > CARTO_RUNTIME_PARAMETERS_STG.env
          echo "${{ secrets.VIB_ENV_PAT_CYPRESS_REPOSITORY }}" > VIB_ENV_PAT_CYPRESS_REPOSITORY.env

          gsutil -m cp *.env gs://mlr-testing-private/secrets-env/
      - name: Generate Helm customization config
        id: helm_customization
        shell: bash
        env:
          PACKAGE_CARTO_VALUES: ${{ steps.secrets.outputs.package-carto-values }}
          PACKAGE_CARTO_SECRETS: ${{ steps.secrets.outputs.package-carto-secrets }}
        run: |
          set -ex

          ## Create Carto packages provided to clients as files
          echo "${PACKAGE_CARTO_VALUES}" > carto-values.yaml
          echo "${PACKAGE_CARTO_SECRETS}" > carto-secrets.yaml

          ## Add some customization like the domain
          cat << EOF > manual_customizations.yaml
          appConfigValues:
            selfHostedDomain: "${{ env.WORKSPACE_DOMAIN }}"
          EOF

            ## HotFix until we fix staging generated packages
          cat << EOF > tmp_overrides.yaml
          cartoConfigValues:
            cartoAccApiDomain: "accounts.stag.app.carto.com"
            cartoAuth0CustomDomain: "auth.stag.carto.com"
          EOF
            # End HotFix

          ## Merge all yamls config required to deploy the Helm package
          # shellcheck disable=SC2016
          yq eval-all '. as $item ireduce ({}; . * $item )' \
            customizations/service_loadBalancer/config.yaml \
            customizations/scale_components/static.yaml \
            customizations/resources/minimum.yaml \
            carto-values.yaml \
            carto-secrets.yaml \
            manual_customizations.yaml \
            tmp_overrides.yaml \
            > vib_helm_package.yaml

          echo "::group::Helm customization generated"
          cat vib_helm_package.yaml
          echo "::endgroup::"

          ## Transform the customization generated to base64
          set +x
          HELM_CUSTOMIZATION_BASE64=$(base64 -w 0 vib_helm_package.yaml)
          echo "::add-mask::${HELM_CUSTOMIZATION_BASE64}"
          sleep 1s
          set -x
          echo "::set-output name=helm-customization-base64::${HELM_CUSTOMIZATION_BASE64}"

      - name: Run validation in VIB platform
        uses: vmware-labs/vmware-image-builder-action@0.2.0
        with:
          pipeline: vib-platform-verify.json
        env:
          VIB_ENV_TARGET_PLATFORM: ${{ matrix.target-platform-id }}
          VIB_ENV_CARTO_RUNTIME_PARAMETERS: ${{ steps.helm_customization.outputs.helm-customization-base64 }}
          VIB_ENV_PAT_CYPRESS_REPOSITORY: ${{ secrets.VIB_ENV_PAT_CYPRESS_REPOSITORY }}
          # VIB_ENV_CYPRESS_RECORD_KEY: ${{ secrets.VIB_ENV_CYPRESS_RECORD_KEY }}
          VIB_ENV_CYPRESS_RECORD_KEY:  ${{ steps.e2e-package.outputs.cypress-record-key }}
          VIB_ENV_CYPRESS_MANAGEMENT_API_CLIENT_SECRET: ${{ secrets.VIB_ENV_CYPRESS_MANAGEMENT_API_CLIENT_SECRET }}
          VIB_ENV_CYPRESS_FIREBASE_API_KEY: ${{ secrets.VIB_ENV_CYPRESS_FIREBASE_API_KEY }}
          VIB_ENV_CYPRESS_CONNECTION_CREDENTIALS: ${{ secrets.VIB_ENV_CYPRESS_CONNECTION_CREDENTIALS }}
          VIB_ENV_CYPRESS_CLIENT_SECRET: ${{ secrets.VIB_ENV_CYPRESS_CLIENT_SECRET }}
          VIB_ENV_WORKSPACE_WWW_SOURCE_URL: ${{ steps.e2e-package.outputs.workspace-www-source-url }}

      - name: Clean up orgs & Auth0 users for E2E
        if: always()
        uses: ./carto-sources/.github/actions/tests-cleaning
        with:
          environment: ${{ env.ENVIRONMENT }}
          registry-service-account-base64: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
          secrets-service-account: ${{ secrets.SELFHOSTED_HELM_SERVICE_ACCOUNT_BASE64 }}
          # override-run-id: "${{ github.repository }}:${{ github.run_id }}[${{ github.run_attempt }}]"
          override-run-id: "vmware-mlr"
