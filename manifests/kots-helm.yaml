apiVersion: kots.io/v1beta2
kind: HelmChart
metadata:
  name: carto
spec:
  chart:
    name: carto
    chartVersion: 1.77.1
  values:
    replicated:
      enabled: true
    # License
    ## Carto Secrets
    cartoSecrets:
      encryptionSecretKey:
        value: '{{repl LicenseFieldValue "encryptionSecretKey" }}'
      jwtApiSecret:
        value: '{{repl LicenseFieldValue "jwtApiSecret" }}'
      varnishDebugSecret:
        value: '{{repl LicenseFieldValue "varnishDebugSecret" }}'
      varnishPurgeSecret:
        value: '{{repl LicenseFieldValue "varnishPurgeSecret" }}'
      launchDarklySdkKey:
        value: '{{repl LicenseFieldValue "launchDarklySdkKey" }}'
      defaultGoogleServiceAccount:
        value: '{{repl ConfigOption "defaultGoogleServiceAccount" }}'
    # Carto Config Values
    cartoConfigValues:
      cartoAccApiDomain: '{{repl LicenseFieldValue "cartoAccApiDomain" }}'
      cartoAccGcpProjectId: '{{repl LicenseFieldValue "cartoAccGcpProjectId" }}'
      cartoAccGcpProjectRegion: '{{repl LicenseFieldValue "cartoAccGcpProjectRegion" }}'
      cartoAuth0ClientId: '{{repl LicenseFieldValue "cartoAuth0ClientId" }}'
      cartoAuth0CustomDomain: '{{repl LicenseFieldValue "cartoAuth0CustomDomain" }}'
      selfHostedTenantId: '{{repl LicenseFieldValue "selfHostedTenantId" }}'
      launchDarklyClientSideId: '{{repl LicenseFieldValue "launchDarklyClientSideId" }}'
      selfHostedGcpProjectId: '{{repl LicenseFieldValue "selfHostedGcpProjectId" }}'
      customerPackageVersion: '{{repl LicenseFieldValue "customerPackageVersion" }}'
      enableErrorResponseStackTrace: "false"
      cartoDataWarehouseEnabled: '{{repl ConfigOptionEquals "enableCDW" "1" }}'
      cartoSelfhostedDwLocation: '{{repl LicenseFieldValue "cartoSelfhostedDwLocation" }}'

    # Customizations
    ## App Secrets
    appSecrets:
      googleMapsApiKey:
        value: '{{repl ConfigOption "googleMapsAPIKey" }}'
      bigqueryOauth2ClientSecret:
        value: '{{repl ConfigOption "bigqueryOauthClientSecret" }}'
      googleCloudStorageServiceAccountKey:
        value: '{{repl ConfigOption "storageBucketsGcpServiceAccount" }}'
      awsAccessKeyId:
        value: '{{repl ConfigOption "storageBucketsAwsAccessKeyId" }}'
      awsAccessKeySecret:
        value: '{{repl ConfigOption "storageBucketsAwsAccessKeySecret" }}'
      azureStorageAccessKey:
        value: '{{repl ConfigOption "storageBucketsAzureAccessKey" }}'
      importAwsAccessKeyId:
        value: '{{repl ConfigOption "storageBucketsImportAwsAccessKeyId" }}'
      importAwsSecretAccessKey:
        value: '{{repl ConfigOption "storageBucketsImportAwsSecretAccessKey" }}'
      exportAwsSecretAccessKey:
        value: '{{repl ConfigOption "storageBucketsExportAwsSecretAccessKey" }}'
      exportAwsAccessKeyId:
        value: '{{repl ConfigOption "storageBucketsExportAwsAccessKeyId" }}'
      ldsHereApiKey:
        value: '{{repl ConfigOption "locationDataServicesHereCredentials" }}'
      ldsTomTomApiKey:
        value: '{{repl ConfigOption "locationDataServicesTomtomCredentials" }}'
      ldsGoogleApiKey:
        value: '{{repl ConfigOption "locationDataServicesGoogleCredentials" }}'
      ldsMapboxApiKey:
        value: '{{repl ConfigOption "locationDataServicesMapboxCredentials" }}'
      ldsTravelTimeAppId:
        value: '{{repl ConfigOption "locationDataServicesTraveltimeAppId" }}'
      ldsTravelTimeApiKey:
        value: '{{repl ConfigOption "locationDataServicesTraveltimeApiKey" }}'
    ## App Config Values
    appConfigValues:
      # domain
      selfHostedDomain: '{{repl ConfigOption "accessToSHDomain" }}'
      # buckets
      storageProvider: '{{repl fromJson (ConfigOption "storageBucketsProvider") | dig "provider" "" }}'
      workspaceImportsBucket: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "workspaceImportsBucket" "" }}'
      workspaceImportsPublic: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "workspaceImportsIsPublic" "" }}'
      workspaceThumbnailsBucket: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "thumbnailsBucket" "" }}'
      workspaceThumbnailsPublic: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "thumbnailsIsPublic" "" }}'
      workspaceExportsBucket: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "workspaceExportsBucket" "" }}'
      googleCloudStorageProjectId: '{{repl fromJson (ConfigOption "storageBucketsDetails") | dig "googleCloudStorageProjectId" "" }}'
      awsS3Region: '{{repl ConfigOption "storageBucketsAwsS3Region" }}'
      importAwsRoleArn: '{{repl ConfigOption "storageBucketsImportExportAwsArnRole" }}'
      awsExportBucket: '{{repl ConfigOption "storageBucketsExportAws" }}'
      awsExportBucketRegion: '{{repl ConfigOption "storageBucketsExportAwsRegion" }}'
      exportAwsRoleArn: '{{repl ConfigOption "storageBucketsImportExportAwsArnRole" }}'
      # other config
      httpCacheEnabled: "true"
      bigqueryOauth2ClientId: '{{repl ConfigOption "bigqueryOauthClientID" }}'
      enableTrackJS: "true"
      ssoOrganizationId: ""
      defaultAtLocation:
        bigquery: "carto-un.carto"
        snowflake: "CARTO.CARTO"
        redshift: "carto"
        postgres: "carto"

    ## Postgresql
    internalPostgresql:
      # Disable the internal Postgres
      enabled: false
    externalPostgresql:
      host: '{{repl ConfigOption "metadataDBHost" }}'
      port: '{{repl ConfigOption "metadataDBPort" }}'
      database: '{{repl ConfigOption "metadataDBName" }}'
      user: '{{repl ConfigOption "metadataDBUser" }}'
      password: '{{repl ConfigOption "metadataDBPassword" }}'
      sslEnabled: repl{{ if ConfigOptionEquals "metadataDBSSLMode" "1"}}truerepl{{ else }}falserepl{{ end }}
      sslCA: |
        repl{{- ConfigOptionData "metadataDBSSLCertificate" | nindent 8 }}

    ## Redis
    internalRedis:
      enabled: repl{{ if ConfigOptionEquals "externalRedisEnabled" "0"}}truerepl{{ else }}falserepl{{ end }}
    externalRedis:
      host: '{{repl ConfigOption "externalRedisHost" }}'
      port: '{{repl ConfigOption "externalRedisPort" }}'
      password: '{{repl ConfigOption "externalRedisPassword" }}'
      tlsEnabled: repl{{ if ConfigOptionEquals "externalRedisSSLMode" "ssl_mode_enable"}}truerepl{{ else }}falserepl{{ end }}
      tlsCA: |
        repl{{- ConfigOptionData "externalRedisSSLCertificate" | nindent 8 }}

    # Service Account
    commonBackendServiceAccount:
      enableGCPWorkloadIdentity: repl{{ if ConfigOptionEquals "googleWorkloadIdentityStatus" "enabled_on_apis"}}truerepl{{ else }}falserepl{{ end }}
      annotations:
        iam.gke.io/gcp-service-account: '{{repl ConfigOption "googleWorkloadIdentityEmail" }}'

    ## TLS Certs
    tlsCerts:
      httpsEnabled: repl{{ if ConfigOptionEquals "accessToSHCustomTLSTermination" "1"}}truerepl{{ else }}falserepl{{ end }}
      autoGenerate: repl{{ if ConfigOptionEquals "accessToSHCustomTLSTerminationCertsBehaviour" "tls_selfsigned_certificates"}}truerepl{{ else }}falserepl{{ end }}
      certificate: '{{repl ConfigOption "accessToSHCustomTLSTerminationCertFile" }}'
      privateKey: '{{repl ConfigOption "accessToSHCustomTLSTerminationKeyFile" }}'

    ## Access to Carto
    router:
      service:
        type: repl{{ if ConfigOptionEquals "accessToSHModeNotKurl" "accessToCartoDefaultLB"}}LoadBalancerrepl{{ else }}NodePortrepl{{ end }}
        annotations: '{{repl fromJson (ConfigOption "loadBalancerSupportedKind") | dig "lb_annotations" "" }}'

  # Values from Advanced Configuration
  optionalValues:
    - when: '{{repl ConfigOptionEquals "platformAdvancedConfig" "1" }}'
      recursiveMerge: true
      values: repl{{ ConfigOption "platformAdvancedConfigValues" | nindent 8 }}
