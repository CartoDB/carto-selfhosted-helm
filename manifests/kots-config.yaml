---
apiVersion: kots.io/v1beta1
kind: Config
metadata:
  name: carto-config
  annotations:
    kots.io/exclude: "true"
spec:
  groups:
    - name: intro
      title: Intro
      items:
        - name: description
          type: label
          title: |-
            
            Welcome to the CARTO Self-Hosted Installer!
            
            CARTO is the leading Location Intelligence platform for the modern data stack. Our Self-Hosted version is designed to align with your infrastructure requirements, making it ideal for industries with stringent security and network/data policies.

            We strongly recommend that you read the documentation to better integrate CARTO into your enterprise environment:
            - [Key Concepts](https://docs.carto.com/carto-self-hosted/key-concepts): Understand the key concepts.
            - [QuickStart](https://docs.carto.com/carto-self-hosted/key-concepts): A starter guide to make installation even easier.
            - [Maintenance](https://docs.carto.com/carto-self-hosted/maintenance): Since you're hosting this yourself, you'll need to configure your own [backups](https://docs.carto.com/carto-self-hosted/maintenance/backups), [monitoring](https://docs.carto.com/carto-self-hosted/maintenance/monitoring), etc.

            Installation id: `{{repl LicenseFieldValue "selfHostedId" }}`

        - name: replicatedLicenseType
          title: License Type
          hidden: true
          type: text
          value: '{{repl LicenseFieldValue "licenseType" }}'
        - name: valuesDerivedFromCartoPlatformEnvironment
          title: Customer Package Values
          type: textarea
          hidden: true
          default: |-
            repl{{ $environment := (LicenseFieldValue "cartoPlatformEnvironment") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if eq $environment "production" }}
            repl{{    $_ := set $result "cartoAccApiDomain" "YWNjb3VudHMuYXBwLmNhcnRvLmNvbQ==" }}
            repl{{    $_ := set $result "cartoAccGcpProjectId" "Y2FydG8tYWNjLXVzLWVhc3QxLTE=" }}
            repl{{    $_ := set $result "cartoAccGcpProjectRegion" "dXMtZWFzdDEtMQ==" }}
            repl{{    $_ := set $result "cartoAuth0CustomDomain" "YXV0aC5jYXJ0by5jb20=" }}
            repl{{    $_ := set $result "dataObservatoryProjectId" "Y2FydG8tZGF0YQ==" }}
            repl{{ else if eq $environment "staging" }}
            repl{{    $_ := set $result "cartoAccApiDomain" "YWNjb3VudHMuc3RhZy5hcHAuY2FydG8uY29t" }}
            repl{{    $_ := set $result "cartoAccGcpProjectId" "Y2FydG8tYWNjLXVzLWVhc3QxLTEtc3RhZw==" }}
            repl{{    $_ := set $result "cartoAccGcpProjectRegion" "dXMtZWFzdDEtMS1zdGFn" }}
            repl{{    $_ := set $result "cartoAuth0CustomDomain" "YXV0aC5zdGFnLmNhcnRvLmNvbQ==" }}
            repl{{    $_ := set $result "dataObservatoryProjectId" "Y2FydG8tZGF0YS1zdGFn" }}
            repl{{ end }}
            repl{{ toJson $result }}
        - name: autogeneratedVarnishDebugSecret
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedVarnishPurgeSecret
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedInternalRedisPassword
          title: Password used for the internal redis
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedInstanceId
          title: Instance ID of the installation
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 32 }}'

        - name: derivedSelfHostedGCPProjectId
          title: Project Id
          type: textarea
          hidden: true
          default: repl{{ fromJson (LicenseFieldValue "cartoPlatformDefaultSA") | dig "project_id" "" }}

        - name: ldsProcessedConfig
          title: LDS Configuration
          type: textarea
          hidden: true
          default: |-
            repl{{ $ldsLicenseConfig := fromJson (LicenseFieldValue "ldsConfiguration") }}
            repl{{ if $ldsLicenseConfig }}
            repl{{  toJson $ldsLicenseConfig }}
            repl{{ else }}
            repl{{  $ldsLicenseConfig := fromJson "{}" }}
            repl{{  $_ := set $ldsLicenseConfig "geocoding_provider" "" }}
            repl{{  $_ := set $ldsLicenseConfig "isoline_provider" "" }}
            repl{{  $_ := set $ldsLicenseConfig "routing_provider" "" }}
            repl{{  $ldsCredentials := fromJson "{}" }}
            repl{{  $_ := set $ldsCredentials "tomtom_api_key" "" }}
            repl{{  $_ := set $ldsCredentials "traveltime_api_key" "" }}
            repl{{  $_ := set $ldsCredentials "traveltime_app_id" "" }}
            repl{{  $_ := set $ldsCredentials "here_api_key" "" }}
            repl{{  $_ := set $ldsCredentials "mapbox_api_key" "" }}
            repl{{  $_ := set $ldsCredentials "google_api_key" "" }}
            repl{{  $_ := set $ldsLicenseConfig "credentials" $ldsCredentials }}
            repl{{  toJson $ldsLicenseConfig }}
            repl{{ end }}

        - name: ldsGeocodingProvider
          title: Geocoding provider
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "geocoding_provider" "" }}
        - name: ldsIsolineProvider
          title: Isolines provider
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "isoline_provider" "" }}
        - name: ldsRoutingProvider
          title: Routing provider
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "routing_provider" "" }}


        - name: ldsTomtomApiKey
          title: TomTom API Key
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "tomtom_api_key" "" }}
        - name: ldsTravelTimeApiKey
          title: TravelTime API Key
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "traveltime_api_key" "" }}
        - name: ldsTravelTimeAppId
          title: TravelTime App Id
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "traveltime_app_id" "" }}
        - name: ldsHereApiKey
          title: Here API Key
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "here_api_key" "" }}
        - name: ldsMapboxApiKey
          title: Mapbox API Key
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "mapbox_api_key" "" }}
        - name: ldsGoogleApiKey
          title: Google API Key
          type: textarea
          hidden: true
          default: repl{{ fromJson (ConfigOption "ldsProcessedConfig") | dig "credentials" "google_api_key" "" }}

    # Postgresql
    - name: metadataDatabase
      title: Metadata Database
      description: |-
        Information needed to connect to your metadata database.
        [More info](https://docs.carto.com/carto-self-hosted/key-concepts/deployment-requirements#external-database).
      items:
        - name: metadataDBHost
          title: Host
          type: text
          required: true
          affix: left
        - name: metadataDBPort
          title: Port
          type: text
          required: true
          value: "5432"
          default: "5432"
          affix: right
        - name: metadataDBUser
          title: User
          type: text
          required: true
          affix: left
        - name: metadataDBPassword
          title: Password
          type: password
          required: true
          affix: right
        - name: metadataDBName
          title: Database Name
          type: text
          required: true
          affix: left
        # This label is only for formatting purposes. We can't leave empty cells if we use the affix parameter
        - name: metadataDBCustomLabelFormat
          type: label
          affix: right
        - name: metadataDBSSLMode
          title: Enable TLS
          type: bool
          default: "0"
          affix: left
        # This label is only for formatting purposes. We can't leave empty cells if we use the affix parameter
        - name: metadataDBCustomLabelFormat2
          type: label
          affix: right
        - name: metadataDBSSLCertificate
          title: SSL Certificate
          when: '{{repl (ConfigOptionEquals "metadataDBSSLMode" "1") }}'
          type: file
          required: true
          affix: left

    # Access
    - name: accessToCARTOSelfHosted
      title: Access to CARTO
      description: |-
        Configure your Self-Hosted platform's domain and TLS certificate for secure access.
        [More info](https://docs.carto.com/carto-self-hosted/deployment-guides/kubernetes#access-to-carto).
      items:
        - name: loadBalancerSupportedKind
          title: Load Balancer kind
          type: textarea
          hidden: true
          default: |-
            repl{{ $k8sDistribution := Distribution }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if eq $k8sDistribution "gke" }}
            repl{{    $_ := set $result "name" "routerLoadBalancerGKE" }}
            repl{{    $_ := set $result "title" "GCP GKE LoadBalancer" }}
            repl{{    $_ := set $result "gatewayClassName" "gke-l7-global-external-managed" }}
            repl{{ else if eq $k8sDistribution "eks" }}
            repl{{    $_ := set $result "name" "routerLoadBalancerEKS" }}
            repl{{    $_ := set $result "title" "AWS EKS LoadBalancer" }}
            repl{{ else }}
            repl{{    $_ := set $result "name" "unsupported" }}
            repl{{    $_ := set $result "title" (print "ERROR: No Load Balancer supported for your kubernetes platform, " $k8sDistribution) }}
            repl{{ end }}
            repl{{ toJson $result }}
        - name: errorMessage
          type: heading
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq (fromJson (ConfigOption "loadBalancerSupportedKind") | dig "name" "unsupported") "unsupported") }}'
          title: '{{repl fromJson (ConfigOption "loadBalancerSupportedKind") | dig "title" "Unsupported" }}'
        - name: platformDistribution
          hidden: true
          type: text
          default: repl{{ Distribution }}
        - name: isK8sFullyImplementedPlatform
          title: Kubernetes Platform
          when: &when_is_k8s_fully_implemented_platform >-
            {{repl $result := or (eq Distribution "gke") (eq Distribution "eks") -}}
            {{repl $result -}}
          hidden: true
          type: text
          default: *when_is_k8s_fully_implemented_platform
        - name: isEmbeddedCluster
          title: Embedded Cluster Platform
          when: &when_is_embedded_cluster >-
            {{repl $result := (eq Distribution "embedded-cluster") -}}
            {{repl $result -}}
          default: *when_is_embedded_cluster
          hidden: true
          type: text
        - name: isK8sNotFullyImplementedPlatform
          title: Not supported Kubernetes Platform
          when: &when_is_k8s_NOT_fully_implemented_platform >-
            {{repl $result := not (or (eq Distribution "gke") (eq Distribution "eks") (eq Distribution "embedded-cluster")) -}}
            {{repl $result -}}
          hidden: true
          type: text
          default: *when_is_k8s_NOT_fully_implemented_platform
        - name: customRouterSSLCerts
          type: text
          hidden: true
          readonly: true
          when: &when_custom_ssl_certs >-
            {{repl $cartoRouterHTTPSEnabled := (ConfigOptionEquals "cartoRouterHTTPSEnabled" "true") -}}
            {{repl $terminateTLSInCARTOSelected := (ConfigOptionEquals "TLSTerminationLayer" "accessToCartoRouterHTTPS") -}}
            {{repl $result := and $cartoRouterHTTPSEnabled $terminateTLSInCARTOSelected -}}
            {{repl $result -}}
          default: *when_custom_ssl_certs
        - name: SSLCertificatesAWS
          type: text
          hidden: true
          readonly: true
          when: &when_aws_ssl_certs >-
            {{repl $cond1 := (eq Distribution "eks") -}}
            {{repl $cond2 := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $result := and $cond1 $cond2 -}}
            {{repl $result -}}
          default: *when_aws_ssl_certs
        - name: SSLCertificatesGCP
          type: text
          hidden: true
          readonly: true
          when: &when_gcp_managed_ssl_certs >-
            {{repl $cond1 := (eq Distribution "gke") -}}
            {{repl $cond2 := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $result := and $cond1 $cond2 -}}
            {{repl $result -}}
          default: *when_gcp_managed_ssl_certs
        - name: cartoRouterHTTPSEnabled
          type: text
          hidden: true
          readonly: true
          when: &when_router_https_enabled >-
            {{repl $isEmbeddedCluster := (ConfigOptionEquals "isEmbeddedCluster" "true") -}}
            {{repl $isK8sFullyImplPlatform := (ConfigOptionEquals "isK8sFullyImplementedPlatform" "true") -}}
            {{repl $isK8sNotFullyImplPlatform := (ConfigOptionEquals "isK8sNotFullyImplementedPlatform" "true") -}}
            {{repl $customAccessModeSelectedInFull := and $isK8sFullyImplPlatform (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") -}}
            {{repl $customAccessModeSelectedInNotFull := and $isK8sNotFullyImplPlatform (ConfigOptionEquals "accessToCartoModeK8sNotFullySupported" "accessToCartoModeK8sCustom") -}}
            {{repl $customAccessModeSelected := or $customAccessModeSelectedInFull $customAccessModeSelectedInNotFull -}}
            {{repl $terminateTLSInCARTOSelected:= (ConfigOptionEquals "TLSTerminationLayer" "accessToCartoRouterHTTPS") -}}
            {{repl $result := and $terminateTLSInCARTOSelected (or $isEmbeddedCluster $customAccessModeSelected) -}}
            {{repl $result -}}
          default: *when_router_https_enabled
        - name: kubernetesGatewayEnabled
          type: text
          hidden: true
          readonly: true
          when: &when_kubernetes_gateway_enabled >-
            {{repl $defaultAccessModeSelected := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $isGke := (eq Distribution "gke") -}}
            {{repl $result := and $defaultAccessModeSelected $isGke -}}
            {{repl $result -}}
          default: *when_kubernetes_gateway_enabled
        - name: cartoSelfHostedDomain
          title: Domain
          help_text: |-
            Specify the domain for end users to access your Self-Hosted platform (excluding protocol or paths).
          type: text
          required: true
          validation:
            regex:
              pattern: ^([a-zA-Z0-9_\-]+\.)+[a-zA-Z]{2,}(:[0-9]+)?$
              message: "The domain must be a domain/subdomain. We don't support paths or protocols."
        # k8s
        - name: accessToCartoModeK8s
          title: &accessToCartoModeK8sTitle Self-Hosted access mode
          help_text: &accessToCartoModeK8sHelpText |-
            How do you want to access to your Self-Hosted?
          type: select_one
          when: *when_is_k8s_fully_implemented_platform
          required: true
          items:
            - name: accessToCartoModeK8sDefault
              title: |-
                Default Access
            - name: accessToCartoModeK8sCustom
              title: |-
                Custom
        - name: accessToCartoModeK8sDefaultLabel
          type: label
          when: '{{repl (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") }}'
          title: |-
            We will deploy an external Load Balancer to access to your Carto Self-Hosted environment.
        - name: accessToCartoModeK8sCustomLabel
          type: label
          when: '{{repl (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") }}'
          title: |-
            You should create and configure your own Load Balancer and connect it to the CARTO router service.
        # Embedded Cluster
        - name: accessToCartoModeEmbeddedCluster
          title: |-
            You are going to deploy CARTO Self-Hosted on single-instance mode.
          type: label
          when: *when_is_embedded_cluster

          # TLS
        - name: TLSTerminationLayer
          title: TLS Termination
          type: select_one
          when: '{{repl or (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") (ConfigOptionEquals "isK8sNotFullyImplementedPlatform" "true") (ConfigOptionEquals "isEmbeddedCluster" "true") }}'
          help_text: |-
            TLS termination is required and it can be achieved within the CARTO application itself or through a load balancer (recommended).
          items:
            - name: accessToCartoRouterHTTPS
              title: |-
                Terminate TLS inside CARTO application
            - name: accessToCartoRouterHTTP
              title: |-
                Terminate TLS in a higher layer and connect to CARTO over HTTP

        # Certificates
        ## Custom certs
        - name: accessToCartoCustomTLSKeyFile
          title: Private Key File
          when: *when_custom_ssl_certs
          type: file
          required: true
        - name: accessToCartoCustomTLSCertFile
          title: Certificate File
          when: *when_custom_ssl_certs
          type: file
          required: true

        # Managed Certs
        ## GKE
        - name: accessToCartoGCPExternallyManagedCertsName
          type: text
          title: GCP SSL Managed Cert Name
          required: true
          help_text: |-
            Enter the name of the certificate created in GCP's managed services. For assistance in managing certificates, refer to the [Google Cloud Documentation](https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs)
            Remember that if you're trying to configure a certificate provisioned by Google you must update your DNS to point `{{repl ConfigOption "cartoSelfHostedDomain" }}` to the load balancer's IP address to let Google sign the certificate
          when: *when_gcp_managed_ssl_certs
        ## EKS
        - name: accessToCartoAWSExternallyManagedCertsName
          title: TLS Certificates
          when: *when_aws_ssl_certs
          type: text
          required: true
          help_text: The Certificate ARN in format arn:aws:acm:<REGION>:<AWS_ACCOUNT>:certificate/<CERTIFICATE_ID>

        # Static IP
        - name: accessToCartoGCPStaticIPName
          type: text
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq Distribution "gke") }}'
          title: Global static IP Address name
          help_text: |-
            Please specify the name (not address) of a reserved global external public IP address in GCP to assign to the installation. If left blank, a random IP will be generated.
          recommended: true
        # Static IP
        - name: accessToCartoAWSStaticIPName
          type: text
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq Distribution "eks") }}'
          title: Elastic IP Address allocation ID
          help_text: |-
            Bring your static IP allocation ID. We'll link this IP to the external load balancer.
            The number of Allocation IDs must match the number of subnets that are used for the load balancer.
            For more information, see the [AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.5/guide/service/annotations/#eip-allocations) documentation.
            
            If you don't provide an Allocation ID, a random domain will be assigned to your load balancer. You can find some information about how to use the domain you configured for CARTO platform in the [AWS ELB documentation](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html).
          recommended: true

        # Ingress testing mode
        - name: enableIngressTestingMode
          title: Ingress testing mode
          when: '{{repl or (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") (ConfigOptionEquals "accessToCartoModeK8sNotFullySupported" "accessToCartoModeK8sCustom") (ConfigOptionEquals "isEmbeddedCluster" "true") }}'
          help_text: |-
            Enable if you want to turn on ingress testing mode. This will deploy the CARTO router in testing mod, showing a static page to check that the layers you place on top of CARTO work.
          type: bool
          default: "0"

    # Buckets
    - name: storageBuckets
      title: Cloud Storage
      description: |-
        Cloud storage buckets are required for storing resources utilized by the platform. Read [this section](https://docs.carto.com/carto-self-hosted/guides/configure-your-own-buckets) to create the resources required.
      items:
        - name: storageBucketsBehaviour
          title: Select your storage provider
          type: select_one
          default: custom_gcs
          items:
            - name: custom_gcs
              title: Google Cloud Storage
            - name: custom_aws_s3
              title: Amazon Web Services S3
            - name: custom_azb
              title: Azure Blob Storage
        - name: storageBucketsProvider
          title: Buckets Provider
          type: textarea
          hidden: true
          default: |-
            repl{{ $gcs := or (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") (ConfigOptionEquals "storageBucketsBehaviour" "default") }}
            repl{{ $aws := (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}
            repl{{ $azb := (ConfigOptionEquals "storageBucketsBehaviour" "custom_azb") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if $gcs }}
            repl{{    $_ := set $result "provider" "gcp" }}
            repl{{ else if $aws }}
            repl{{    $_ := set $result "provider" "s3" }}
            repl{{ else if $azb }}
            repl{{    $_ := set $result "provider" "azure-blob" }}
            repl{{ end }}
            repl{{ toJson $result }}
        
        # GCS
        - name: storageBucketsGcpServiceAccountEmail
          title: Identity used to access GCS
          help_text: |-
            The service account email used to connect to GCS buckets. If you want to use your own credentials need to modify CARTO Platform credentials in Advanced configuration.
          type: text
          readonly: true
          value: '{{repl fromJson (ConfigOption "googleServiceAccountUsed") | dig "sa" "" }}'
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") }}'
        - name: storageBucketsGcpProjectId
          title: Buckets project id
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") }}'
          help_text: The GCP Project Id of these buckets.
          type: text
          required: true
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ ConfigOption "derivedSelfHostedGCPProjectId"}}repl{{ end }}

        # AWS
        - name: storageBucketsAwsAccessKeyId
          title: The AccessKey ID for S3 buckets
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
        - name: storageBucketsAwsAccessKeySecret
          title: The AccessKey Secret for S3 buckets
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
        - name: storageBucketsAwsS3Region
          title: Buckets AWS S3 Region
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
          help_text: Region of the buckets created in AWS S3
          type: text
          required: true

        # Azure
        - name: storageBucketsAzureStorageAccount
          title: Azure-Blob Storage Account
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_azb") }}'
        - name: storageBucketsAzureAccessKey
          title: AccessKey for Azure-Blob
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_azb") }}'

        - name: storageBucketsWorkspaceImports
          title: Temp Bucket
          help_text: Bucket name to be used for storing temporary data.
          type: text
          required: true
          default: repl{{ if and (ConfigOptionEquals "replicatedLicenseType" "dev") (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs")}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-client-storage"}}repl{{ end }}
        - name: storageBucketsThumbnails
          title: Assets Bucket
          help_text: Bucket name to be used to store the assets generated in the app.
          type: text
          required: true
          default: repl{{ if and (ConfigOptionEquals "replicatedLicenseType" "dev") (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs")}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-thumbnails-storage"}}repl{{ end }}
        - name: storageBucketsThumbnailsIsPublic
          title: Assets bucket is public
          help_text: |-
            Public bucket is required if you'd like to use custom markers.
          type: bool
          default: "1"

        # Exports GCP
        - name: storageBucketsExportGcp
          title: Exports Bucket
          help_text: |- 
            Bucket name to store exported data. Leave it blank to disable exports.
          type: text
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") }}'
          required: false
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-export-storage"}}repl{{ end }}
            

        # Exports for AWS
        - name: storageBucketsExportAws
          title: AWS exports bucket name
          help_text: Bucket name to store exported data. Leave it blank to disable exports.
          type: text
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
          required: false
        - name: storageBucketsImportExportAwsArnRole
          title: AWS arn bucket role
          help_text: |-
            A AWS arn role must be provided. Check the following instructions for [Redshift](https://docs.carto.com/carto-self-hosted/guides/configure-your-own-buckets#configuration-for-redshift) or [Snowflake](https://docs.carto.com/carto-self-hosted/guides/configure-your-own-buckets#configuration-for-snowflake) 
           
          type: text
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
          required: false

    # Advanced Config
    - name: platformAdvancedConfig
      title: Advanced Config
      description: |-
        Fine-tune your self-hosted environment with advanced configuration.
      items:
        ## Redis
        - name: externalRedisEnabled
          title: Redis
          help_text: |-
            Configure an external in memory cache.
            [More info](https://docs.carto.com/carto-self-hosted/guides/configure-an-external-in-memory-cache).
          type: bool
          default: "0"
        - name: externalRedisHost
          title: Host
          type: text
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
        - name: externalRedisPort
          title: Port
          type: text
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
          value: "6379"
          default: "6379"
        - name: externalRedisPassword
          title: Password
          type: password
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
        - name: externalRedisTLSBehaviour
          title: Enable SSL/TLS
          type: select_one
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          default: tls_disabled
          items:
            - name: tls_disabled
              title: Disable
            - name: tls_enabled
              title: Enable
        - name: externalRedisTLSCertificate
          title: SSL/TLS certificate
          when: '{{repl and (ConfigOptionEquals "externalRedisEnabled" "1") (ConfigOptionEquals "externalRedisTLSBehaviour" "tls_enabled") }}'
          type: file
          required: true

        ## Proxy
        - name: externalProxyEnabled
          title: External proxy
          help_text: |-
            Configuring an external proxy for egress Connections.
            [More info](https://docs.carto.com/carto-self-hosted/guides/configure-an-external-proxy).
          type: bool
          default: "0"
        - name: externalProxyNotConfiguredWarning
          type: label
          title: |-
            ⚠️  The external proxy is not configured correctly. Please, check the [documentation](https://docs.carto.com/carto-self-hosted/guides/configure-an-external-proxy) to configure it properly.
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (empty HTTPProxy) }}'
        - name: externalProxyType
          title: External proxy type
          type: select_one
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          required: true
          default: http
          items:
            - name: http
              title: HTTP
            - name: https
              title: HTTPS
        - name: externalProxyHost
          title: Host
          type: text
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          value: "repl{{ HTTPProxy }}"
          readonly: true
          validation:
            regex:
              pattern: ^(http|https):\/\/([a-zA-Z0-9_\-.]+)+[a-zA-Z]{1,}(:[0-9]+)?$
              message: "The proxy host should contain the protocol used to connect to it. Please check that you executed the installation using a valid proxy host. The protocol should be http or https."
        - name: externalProxyExcludedDomains
          title: Excluded domains
          type: text
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          value: "repl{{ NoProxy }}"
          readonly: true
        - name: externalHttpsProxySslCertificateCheck
          title: SSL certificate checks
          type: bool
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (ConfigOptionEquals "externalProxyType" "https") }}'
          default: "0"
          help_text: |-
            Specify if CARTO Self-hosted should check if the proxy certificate is valid or not.
        - name: externalProxyCAConfigmapName
          hidden: true
          type: text
          value: 'repl{{ PrivateCACert }}'
          readonly: true

        ## SSO
        - name: ssoEnabled
          title: Single Sign-On
          help_text: |-
            Enable Single Sign-On (SSO) to authenticate against your own IdP.
            [More info](https://docs.carto.com/carto-self-hosted/guides/configure-single-sign-on-sso).
          type: bool
          default: "0"
        - name: ssoOrganizationId
          title: Organization ID
          type: text
          when: '{{repl (ConfigOptionEquals "ssoEnabled" "1") }}'
          required: true

        ## CDW
        - name: enableCDW
          title: CARTO Data Warehouse
          help_text: >-
            Enable the CARTO Data Warehose.
            [More info](https://docs.carto.com/carto-self-hosted/guides/enable-the-carto-data-warehouse).
          type: bool
          default: "0"

        ## Google Basemaps
        - name: googleBasemapsEnabled
          title: Google Basemaps
          help_text: |
            Enable if you want to use the Google basemaps. 
            [More info](https://docs.carto.com/carto-self-hosted/guides/enable-google-basemaps).
          type: bool
          default: "0"
        - name: googleMapsAPIKey
          title: Google Maps API Key
          type: text
          when: '{{repl (ConfigOptionEquals "googleBasemapsEnabled" "1") }}'
          required: true

        ## BigQuery Oauth
        - name: bigqueryOauthEnabled
          title: BigQuery OAuth connections
          help_text: |-
            If you would like the option to connect to BigQuery using OAuth, please enable this option.
            [More info](https://docs.carto.com/carto-self-hosted/guides/enable-bigquery-oauth-connections).
          type: bool
          default: "0"
        - name: bigqueryOauthClientID
          title: BigQuery OAuth client ID
          when: '{{repl (ConfigOptionEquals "bigqueryOauthEnabled" "1") }}'
          type: text
          required: true
        - name: bigqueryOauthClientSecret
          title: BigQuery OAuth client secret
          when: '{{repl (ConfigOptionEquals "bigqueryOauthEnabled" "1") }}'
          type: password
          required: true

        ## Custom AT location
        - name: defaultATLocationEnabled
          title: Custom default AT location
          help_text: |-
            All connections created from CARTO platform have a default AT location. If you want to use a custom location for the AT in your connections, please enable this option.
          type: bool
          default: "0"
        - name: defaultATLocationBigQuery
          title: Default AT location for BigQuery connections
          when: '{{repl (ConfigOptionEquals "defaultATLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The BigQuery dataset where the AT is installed (i.e. `carto-un.carto`)
        - name: defaultATLocationRedshift
          title: Default AT location for Redshift connections
          when: '{{repl (ConfigOptionEquals "defaultATLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The Redshift schema where the AT is installed (i.e. `carto`)
        - name: defaultATLocationSnowflake
          title: Default AT location for Snowflake connections
          when: '{{repl (ConfigOptionEquals "defaultATLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The Snowflake database and schema where the AT is installed (i.e. `CARTO.CARTO`)
        - name: defaultATLocationPostgres
          title: Default AT location for PostgreSQL connections
          when: '{{repl (ConfigOptionEquals "defaultATLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The PostgreSQL schema where the AT is installed (i.e. `carto`)

        ## Custom DO location
        - name: defaultDOLocationEnabled
          title: Custom default DO location
          help_text: |-
            All connections created from CARTO platform have a default DO location. If you want to use a custom location for the DO in your connections, please enable this option.
          type: bool
          default: "0"
        - name: defaultDOLocationBigQuery
          title: Default DO location for BigQuery connections
          when: '{{repl (ConfigOptionEquals "defaultDOLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The BigQuery dataset where the DO is installed (i.e. `carto-un.carto`)
        - name: defaultDOLocationRedshift
          title: Default DO location for Redshift connections
          when: '{{repl (ConfigOptionEquals "defaultDOLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The Redshift schema where the DO is installed (i.e. `carto`)
        - name: defaultDOLocationSnowflake
          title: Default DO location for Snowflake connections
          when: '{{repl (ConfigOptionEquals "defaultDOLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The Snowflake database and schema where the DO is installed (i.e. `CARTO.CARTO`)
        - name: defaultDOLocationPostgres
          title: Default DO location for PostgreSQL connections
          when: '{{repl (ConfigOptionEquals "defaultDOLocationEnabled" "1") }}'
          type: text
          help_text: |-
            The PostgreSQL schema where the DO is installed (i.e. `carto`)

        ## Workload Identity
        # Google
        - name: enableGoogleWorkloadIdentity
          title: Google Workload Identity
          help_text: |-
            The CARTO APIs running on your infrastructure are going to use Workload Identity to access to Google Cloud Platform.
            [More info](https://docs.carto.com/carto-self-hosted/guides/use-workload-identity-in-gcp).
          type: bool
          default: "0"
        - name: k8sWorkloadIdentityServiceAccountName
          title: Kubernetes workload identity service account name
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          required: true
          type: text
          help_text: |-
            Name of the kubernetes service account that you created in the namespace to configure Workload Identity.
            [More info](https://docs.carto.com/carto-self-hosted/guides/use-workload-identity-in-gcp).
          # BigQuery
        - name: enableBigqueryWorkloadIdentityConnection
          title: BigQuery workload identity
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          help_text: |-
            This is going to create a shared connection with all the users of your environment
            [More info](https://docs.carto.com/carto-self-hosted/guides/use-workload-identity-in-gcp#create-a-bigquery-connection-managed-using-workload-identity)
          type: bool
          default: "0"
        - name: bigqueryWorkloadIdentityConnectionWorkflowTMP
          title: Workflows temporary location
          when: &when_google_workload_identity_and_connections >-
            {{repl $cond1 := (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") -}}
            {{repl $cond2 := (ConfigOptionEquals "enableBigqueryWorkloadIdentityConnection" "1") -}}
            {{repl $result := and $cond1 $cond2 -}}
            {{repl $result -}}
          help_text: |-
            BigQuery dataset used for Carto Workflows to store temporary tables (i.e. `my_gcp_project.my_dataset`)
          required: true
          type: text
        - name: bigqueryWorkloadIdentityConnectionBillingProject
          title: Google billing broject
          when: *when_google_workload_identity_and_connections
          help_text: |-
            GCP project to be charged with the BigQuery costs when using Workload Identity
          required: true
          type: text
        - name: bigqueryWorkloadIdentityConnectionOwnerId
          title: CARTO connection owner id
          when: *when_google_workload_identity_and_connections
          help_text: |-
            Id of the Carto user who will be the owner of the bigquery connection created by workload identity (i.e. `auth0|3idsj230990sj4wsddd10`)
          required: true
          type: text

        ## Carto Platform Credentials
        - name: cartoPlatformGoogleSA
          title: CARTO Platform credentials
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "0") }}'
          help_text: |-
            This is the Service Account that is going to be used by the Self-Hosted environment to access CARTO platform services.
            ⚠️ Please do not modify it unless you know what you are doing.
            Contact [Carto Support](https://docs.carto.com/carto-self-hosted/support) before proceeding or if you have any doubts.
          required: true
          type: textarea
          default: '{{repl LicenseFieldValue "cartoPlatformDefaultSA" }}'
        - name: cartoPlatformWorkloadIdentityEmail
          title: CARTO Platform credentials
          type: text
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          help_text: |-
            As you enable the Google Workload Identity, this is the Service Account email that is going to be used by the Self-Hosted environment to access CARTO platform services.
            If you want to modify it, do in the Google Workload Identity section.
          readonly: true
          value: '{{repl (ConfigOption "googleWorkloadIdentityEmail" ) }}'
        - name: googleServiceAccountUsed
          title: Google Service Account used by the app
          type: textarea
          hidden: true
          readonly: true
          value: |-
            repl{{ $workloadId := (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if $workloadId }}
            repl{{    $_ := set $result "sa" (ConfigOption "googleWorkloadIdentityEmail") }}
            repl{{ else }}
            repl{{    $extractedEmail := (fromJson (ConfigOption "cartoPlatformGoogleSA") | dig "client_email" "⚠️ Email couldn't be extracted from the configured Service Account ⚠️") }}
            repl{{    $_ := set $result "sa" $extractedEmail }}
            repl{{ end }}
            repl{{ toJson $result }}

        ## High Availability
        - name: enablePlatformHighAvailability
          title: High Availability
          help_text: |-
            Enable if you want a high availability configuration.
          type: bool
          default: "0"
        - name: highAvailabilityMinReplicas
          title: Min replicas
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            Minimum number of replicas to be deployed for each component.
          type: text
          required: true
          default: "2"
        - name: highAvailabilityMaxReplicas
          title: Max replicas
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            Maximum number of replicas to be deployed for each component.
          type: text
          required: true
          default: "3"
        - name: highAvailabilityCacheMemoryRequest
          title: Cache Memory Request
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            The memory requested for the Cache container in MiB.

            The Cache component doesn't support a high availability configuration, 
            so you can adjust the memory requested and increase it in case you need.
          type: text
          required: true
          default: "2048"
          validation:
            regex:
              pattern: ^[1-9]\d*$
              message: "The container memory must be an integer number"
        - name: highAvailabilityCacheCPURequest
          title: Cache CPU Request
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            The CPU units requested for the Cache container in milliCPU.

            The Cache component doesn't support a high availability configuration, 
            so you can adjust the CPU requested and increase it in case you need.
          type: text
          required: true
          default: "500"
          validation:
            regex:
              pattern: ^[1-9]\d*$
              message: "The container CPU must be an integer number"

        ## Custom Encryption Keys
        - name: enableCustomEncryptionKeys
          title: Custom encryption keys
          help_text: |-
            CARTO provides some encryptions keys used to secure the resourced stored in your database and the tokens created on CARTO platform.
            You can use your own keys to secure your data, but please take into account that if you lose these keys it won't be possible to recover CARTO platform.
          type: bool
          when: '{{repl contains "customEncryptionKeysEnabled" (LicenseFieldValue "installerFeaturesEnabled") }}'
          default: "0"
        - name: databaseEncryptionKey
          title: Custom encryption secret key for database encryption
          type: password
          when: '{{repl (ConfigOptionEquals "enableCustomEncryptionKeys" "1") }}'
          required: true
          default: '{{repl LicenseFieldValue "databaseEncryptionKey" }}'
        - name: jwtEncryptionKey
          title: Custom encryption secret key for API tokens
          type: password
          when: '{{repl (ConfigOptionEquals "enableCustomEncryptionKeys" "1") }}'
          required: true
          default: '{{repl LicenseFieldValue "jwtEncryptionKey" }}'

        ## Debug mode
        - name: enablePlatformDebugMode
          title: Debug mode
          help_text: |-
            Enable if you want to enable debug mode.
          type: bool
          default: "0"

    # Custom configuration
    - name: platformAdvancedTuning
      title: Custom Configuration
      description: |-
        Custom configuration section where you can enter plaintext configuration settings, provided by the CARTO support team, to tailor your installation to specific requirements. Please note that modifications should only be made by users with a clear understanding of the implications, and responsibility lies with the user for any changes made.
      items:
        ## Tunning
        - name: platformAdvancedTuningValues
          type: textarea
          title: ""
