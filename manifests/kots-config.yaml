---
apiVersion: kots.io/v1beta1
kind: Config
metadata:
  name: carto-config
  annotations:
    kots.io/exclude: "true"
spec:
  groups:
    - name: Intro
      title: Intro
      items:
        - name: description
          type: label
          title: |-
            Welcome to the CARTO Self-Hosted installer!

            Here you can configure the basic options required by all CARTO Self-Hosted installations.
            If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP).

            The ID of your Self-Hosted installation is: `{{repl LicenseFieldValue "selfHostedId" }}`

        - name: backupReminder
          type: label
          title: |-
            ⚠️  Don't forget to follow the CARTO docs regarding backups  ⚠️
            You need to implement a backup policy for the next things in order to recover your data in case of upgrade, migration or disaster recovery:
            ➡️ Database
            ➡️ Config. ⚠️ We have some hidden configurations so please, follow the guide.


        - name: replicatedLicenseType
          title: License Type
          hidden: true
          type: text
          value: '{{repl LicenseFieldValue "licenseType" }}'
        - name: valuesDerivedFromCartoPlatformEnvironment
          title: Customer Package Values
          type: textarea
          hidden: true
          default: |-
            repl{{ $environment := (LicenseFieldValue "cartoPlatformEnvironment") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if eq $environment "prod" }}
            repl{{    $_ := set $result "cartoAccApiDomain" "YWNjb3VudHMuYXBwLmNhcnRvLmNvbQ==" }}
            repl{{    $_ := set $result "cartoAccGcpProjectId" "Y2FydG8tYWNjLXVzLWVhc3QxLTE=" }}
            repl{{    $_ := set $result "cartoAccGcpProjectRegion" "dXMtZWFzdDEtMQ==" }}
            repl{{    $_ := set $result "cartoAuth0CustomDomain" "YXV0aC5jYXJ0by5jb20=" }}
            repl{{    $_ := set $result "launchDarklyClientSideId" "NjIxNjNmMzZkYjFmNGQxNDhmZmI3Y2Fh" }}
            repl{{ else if eq $environment "staging" }}
            repl{{    $_ := set $result "cartoAccApiDomain" "YWNjb3VudHMuc3RhZy5hcHAuY2FydG8uY29t" }}
            repl{{    $_ := set $result "cartoAccGcpProjectId" "Y2FydG8tYWNjLXVzLWVhc3QxLTEtc3RhZw==" }}
            repl{{    $_ := set $result "cartoAccGcpProjectRegion" "dXMtZWFzdDEtMS1zdGFn" }}
            repl{{    $_ := set $result "cartoAuth0CustomDomain" "YXV0aC5zdGFnLmNhcnRvLmNvbQ==" }}
            repl{{    $_ := set $result "launchDarklyClientSideId" "NjIxNjNmMTYyZDliOTUxNGI4MzI1NWM2" }}
            repl{{ end }}
            repl{{ toJson $result }}
        - name: autogeneratedEncryptionSecretKey
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 32 "[A-Za-z0-9]" }}'
        - name: autogeneratedJwtApiSecret
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedVarnishDebugSecret
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedVarnishPurgeSecret
          title: Customer Package Values
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'
        - name: autogeneratedInternalRedisPassword
          title: password used for the internal redis
          type: textarea
          hidden: true
          readonly: false
          value: '{{repl RandomString 16 "[A-Za-z0-9]" }}'

        - name: derivedSelfHostedGCPProjectId
          title: Project Id
          type: textarea
          hidden: true
          default: repl{{ fromJson (LicenseFieldValue "cartoPlatformDefaultSA") | dig "project_id" "" }}

    # Postgresql
    - name: MetadataDatabase
      title: Metadata Database
      description: |-
        Here you should config the information to connect to your Metadata Database.
        If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-an-external-proxy).
      items:
        - name: metadataDBHost
          title: Host
          type: text
          required: true
          affix: left
        - name: metadataDBPort
          title: Port
          type: text
          required: true
          value: "5432"
          default: "5432"
          affix: right
        - name: metadataDBUser
          title: User
          type: text
          required: true
          affix: left
        - name: metadataDBPassword
          title: Password
          type: password
          required: true
          affix: right
        - name: metadataDBName
          title: Database Name
          type: text
          required: true
          affix: left
        # This label is only for formatting purposes. We can't leave empty cells if we use the affix parameter
        - name: metadataDBCustomLabelFormat
          type: label
          affix: right
        - name: metadataDBSSLMode
          title: Enable TLS
          type: bool
          default: "0"
          affix: left
        # This label is only for formatting purposes. We can't leave empty cells if we use the affix parameter
        - name: metadataDBCustomLabelFormat2
          type: label
          affix: right
        - name: metadataDBSSLCertificate
          title: SSL Certificate
          when: '{{repl (ConfigOptionEquals "metadataDBSSLMode" "1") }}'
          type: file
          required: true
          affix: left

    # Access
    - name: AccessToCARTOSelfHosted
      title: Access to CARTO
      description: |-
        Here you should config how you would like to access to your Self-Hosted from final users devices.
        If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/deployment-guides/kubernetes#access-to-carto).
      items:
        - name: loadBalancerSupportedKind
          title: Load Balancer kind
          type: textarea
          hidden: true
          default: |-
            repl{{ $k8sDistribution := Distribution }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if eq $k8sDistribution "gke" }}
            repl{{    $_ := set $result "name" "routerLoadBalancerGKE" }}
            repl{{    $_ := set $result "title" "GCP GKE LoadBalancer" }}
            repl{{    $_ := set $result "gatewayClassName" "gke-l7-global-external-managed" }}
            repl{{ else if eq $k8sDistribution "eks" }}
            repl{{    $_ := set $result "name" "routerLoadBalancerEKS" }}
            repl{{    $_ := set $result "title" "AWS EKS LoadBalancer" }}
            repl{{ else if eq $k8sDistribution "aks" }}
            repl{{    $_ := set $result "name" "routerLoadBalancerAKS" }}
            repl{{    $_ := set $result "title" "Azure AKS LoadBalancer" }}
            repl{{ else }}
            repl{{    $_ := set $result "name" "unsupported" }}
            repl{{    $_ := set $result "title" (print "ERROR: No Load Balancer supported for your kubernetes platform, " $k8sDistribution) }}
            repl{{ end }}
            repl{{ toJson $result }}
        - name: errorMessage
          type: heading
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq (fromJson (ConfigOption "loadBalancerSupportedKind") | dig "name" "unsupported") "unsupported") }}'
          title: '{{repl fromJson (ConfigOption "loadBalancerSupportedKind") | dig "title" "Unsupported" }}'
        - name: platformDistribution
          hidden: true
          type: text
          default: repl{{ Distribution }}
        - name: isK8sPlatform
          title: Kubernetes Platform
          when: &when_is_k8s_platform >-
            {{repl $result := or (eq Distribution "gke") (eq Distribution "eks") (eq Distribution "aks") -}}
            {{repl $result -}}
          hidden: true
          type: text
          default: *when_is_k8s_platform
        - name: isEmbeddedCluster
          title: Embedded Cluster Platform
          # TODO: For the moment we're checking if it's embedded cluster if we can't obtain the k8s platform, but we should change this to a more reliable way when allowed by Replicated
          when: &when_is_embedded_cluster >-
            {{repl $result :=  (empty Distribution) -}}
            {{repl $result -}}
          default: *when_is_embedded_cluster
          hidden: true
          type: text
        - name: customSSLCerts
          type: text
          hidden: true
          readonly: true
          when: &when_custom_ssl_certs >-
            {{repl $isGke := (eq Distribution "gke") -}}
            {{repl $isEks := (eq Distribution "eks") -}}
            {{repl $defaultAccessModeSelected := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $provideCustomSSLCertsSelected := (ConfigOptionEquals "accessToCartoTLSGKECertificateBehaviour" "use_custom_certificates_files_provided") -}}
            {{repl $customAccessModeSelected := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") -}}
            {{repl $terminateTLSInCARTOSelected := (ConfigOptionEquals "TLSTerminationLayer" "accessToCartoRouterHTTPS") -}}
            {{repl $isEmbeddedCluster := (ConfigOptionEquals "isEmbeddedCluster" "true") -}}
            {{repl $result := or (and $isGke $defaultAccessModeSelected $provideCustomSSLCertsSelected) (and (or $isGke $isEks) (and $customAccessModeSelected $terminateTLSInCARTOSelected)) (and $isEmbeddedCluster $terminateTLSInCARTOSelected) -}}
            {{repl $result -}}
          default: *when_custom_ssl_certs
        - name: SSLCertificatesAWS
          type: text
          hidden: true
          readonly: true
          when: &when_aws_ssl_certs >-
            {{repl $cond1 := (eq Distribution "eks") -}}
            {{repl $cond2 := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $result := and $cond1 $cond2 -}}
            {{repl $result -}}
          default: *when_aws_ssl_certs
        - name: SSLCertificatesGCP
          type: text
          hidden: true
          readonly: true
          when: &when_gcp_managed_ssl_certs >-
            {{repl $cond1 := (eq Distribution "gke") -}}
            {{repl $cond2 := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $cond3 := (ConfigOptionEquals "accessToCartoTLSGKECertificateBehaviour" "GCP_externally_managed_certificates") -}}
            {{repl $result := and $cond1 $cond2 $cond3 -}}
            {{repl $result -}}
          default: *when_gcp_managed_ssl_certs
        - name: cartoRouterHTTPSEnabled
          type: text
          hidden: true
          readonly: true
          when: &when_router_https_enabled >-
            {{repl $customAccessModeSelected := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") -}}
            {{repl $isEmbeddedCluster := (ConfigOptionEquals "isEmbeddedCluster" "true") -}}
            {{repl $terminateTLSInCARTOSelected:= (ConfigOptionEquals "TLSTerminationLayer" "accessToCartoRouterHTTPS") -}}
            {{repl $result := and (or $customAccessModeSelected $isEmbeddedCluster) ($terminateTLSInCARTOSelected) -}}
            {{repl $result -}}
          default: *when_router_https_enabled
        - name: kubernetesGatewayEnabled
          type: text
          hidden: true
          readonly: true
          when: &when_kubernetes_gateway_enabled >-
            {{repl $defaultAccessModeSelected := (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") -}}
            {{repl $isGke := (eq Distribution "gke") -}}
            {{repl $result := and $defaultAccessModeSelected $isGke -}}
            {{repl $result -}}
          default: *when_kubernetes_gateway_enabled
        - name: cartoSelfHostedDomain
          title: Domain
          help_text: |-
            The domain used to access your Self-Hosted (without protocol or paths)
            This is the domain that the final users will use to access your Self-Hosted.
          type: text
          required: true
          default: "carto-onprem.lan"
          validation:
            regex:
              pattern: ^([a-zA-Z0-9_\-]+\.)+[a-zA-Z]{2,}(:[0-9]+)?$
              message: "The domain must be a domain/subdomain. We don't support paths or protocols."
        # k8s
        - name: accessToCartoModeK8s
          title: Self-Hosted access mode
          help_text: |-
            How do you want to access to your Self-Hosted?
          type: select_one
          when: *when_is_k8s_platform
          required: true
          items:
            - name: accessToCartoModeK8sDefault
              title: |-
                Default Access
            - name: accessToCartoModeK8sCustom
              title: |-
                Custom
        - name: accessToCartoModeK8sDefaultLabel
          type: label
          when: '{{repl (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") }}'
          title: |-
            We will deploy an external Load Balancer to access to your Carto Self-Hosted environment.
        - name: accessToCartoModeK8sCustomLabel
          type: label
          when: '{{repl (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") }}'
          title: |-
            You should create and configure your own Load Balancer and connect it to the CARTO router service.
        # Embedded Cluster
        - name: accessToCartoModeEmbeddedCluster
          title: |-
            You are going to deploy CARTO Self-Hosted on single-instance mode.
          type: label
          when: *when_is_embedded_cluster

          # TLS
        - name: TLSTerminationLayer
          title: TLS Termination
          type: select_one
          when: '{{repl or (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sCustom") (ConfigOptionEquals "isEmbeddedCluster" "true") }}'
          help_text: |-
            CARTO only works with HTTPS. TLS termination can be done at the CARTO application level or in a load balancer
            created by yourself that gets the request before sending it back to the application.

            The connection timeout of all incoming connections must be at least 605 seconds.
          items:
            - name: accessToCartoRouterHTTPS
              title: |-
                Terminate TLS inside CARTO application
            - name: accessToCartoRouterHTTP
              title: |-
                Terminate TLS in a higher layer and connect to CARTO over HTTP

        # Certificates
        ## GKE
        - name: accessToCartoTLSGKECertificateBehaviour
          title: TLS Certificates
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq Distribution "gke") }}'
          type: select_one
          items:
            - name: GCP_externally_managed_certificates
              title: GCP SSL Managed Certificates
            - name: use_custom_certificates_files_provided
              title: Bring your own certificates
        ## Custom certs
        - name: accessToCartoCustomTLSKeyFile
          title: Private Key File
          when: *when_custom_ssl_certs
          type: file
          required: true
        - name: accessToCartoCustomTLSCertFile
          title: Certificate File
          when: *when_custom_ssl_certs
          type: file
          required: true
        # Managed Certs
        - name: accessToCartoGCPExternallyManagedCertsName
          type: text
          title: GCP SSL Managed Cert Name
          required: true
          help_text: |-
            The name of your SSL Managed Certificate
            If you need further info, please check [Use Google-managed SSL certificates](https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs)
            Remember that you must update your DNS to point `{{repl ConfigOption "cartoSelfHostedDomain" }}` to the load balancer's IP address to let Google sign the certificate
          when: *when_gcp_managed_ssl_certs
        ## EKS
        - name: accessToCartoAWSExternallyManagedCertsName
          title: TLS Certificates
          when: *when_aws_ssl_certs
          type: text
          required: true
          help_text: The Certificate ARN in format arn:aws:acm:<REGION>:<AWS_ACCOUNT>:certificate/<CERTIFICATE_ID>


        # Static IP
        - name: accessToCartoGCPStaticIPName
          type: text
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq Distribution "gke") }}'
          title: Global static IP Address name
          help_text: |-
            Bring your static IP name. We'll link this IP to the External Load Balancer
          recommended: true
        # Static IP
        - name: accessToCartoAWSStaticIPName
          type: text
          when: '{{repl and (ConfigOptionEquals "accessToCartoModeK8s" "accessToCartoModeK8sDefault") (eq Distribution "eks") }}'
          title: Elastic IP Address allocation ID
          help_text: |-
            Bring your static IP allocation ID. We'll link this IP to the External Load Balancer
            The number of Allocation IDs must match the number of subnets that are used for the load balancer.
            For more information, see the [AWS Load Balancer Controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.5/guide/service/annotations/#eip-allocations) documentation
          recommended: true

    # Buckets
    - name: StorageBuckets
      title: Cloud Storage
      description: |-
        What storage buckets do you want to use?
        If you need more information, please check our [documentation](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-your-own-buckets).
      items:
        - name: storageBucketsBehaviour
          title: Select your Buckets
          type: select_one
          default: custom_gcs
          items:
            - name: custom_gcs
              title: Create and manage my own buckets on Google Cloud Storage
            - name: custom_aws_s3
              title: Create and manage my own buckets on Amazon Web Services S3
            - name: custom_azb
              title: Create and manage my own buckets on Azure Blob Storage
        - name: storageBucketsProvider
          title: Buckets Provider
          type: textarea
          hidden: true
          default: |-
            repl{{ $gcs := or (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") (ConfigOptionEquals "storageBucketsBehaviour" "default") }}
            repl{{ $aws := (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}
            repl{{ $azb := (ConfigOptionEquals "storageBucketsBehaviour" "custom_azb") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if $gcs }}
            repl{{    $_ := set $result "provider" "gcp" }}
            repl{{ else if $aws }}
            repl{{    $_ := set $result "provider" "s3" }}
            repl{{ else if $azb }}
            repl{{    $_ := set $result "provider" "azure-blob" }}
            repl{{ end }}
            repl{{ toJson $result }}
        - name: storageBucketsGcpServiceAccountEmail
          title: Identity used to access GCS
          help_text: |-
            You can edit this filed in the Advanced Configuration
          type: text
          readonly: true
          value: '{{repl fromJson (ConfigOption "googleServiceAccountUsed") | dig "sa" "" }}'
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") }}'
        - name: storageBucketsAwsAccessKeyId
          title: The AccessKey ID for S3 buckets
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
        - name: storageBucketsAwsAccessKeySecret
          title: The AccessKey Secret for S3 buckets
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
        - name: storageBucketsAzureAccessKey
          title: AccessKey for Azure-Blob
          type: text
          required: true
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_azb") }}'
        - name: storageBucketsWorkspaceImports
          title: Workspace Imports Bucket
          help_text: Bucket name to be used for imports
          type: text
          required: true
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-client-storage"}}repl{{ end }}
        - name: storageBucketsWorkspaceImportsIsPublic
          help_text: |-
            Please select the access mode of this bucket
          type: select_one
          default: private
          items:
            - name: private
              title: Private
            - name: public
              title: Public
        - name: storageBucketsThumbnails
          title: Thumbnails Bucket
          help_text: Bucket name to be used to store the thumbnails generated in the app
          type: text
          required: true
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-thumbnails-storage"}}repl{{ end }}
        - name: storageBucketsThumbnailsIsPublic
          help_text: |-
            Please select the access mode of this bucket
          type: select_one
          default: public
          items:
            - name: private
              title: Private
            - name: public
              title: Public
        - name: storageBucketsGcpProjectId
          title: Buckets project id
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_gcs") }}'
          help_text: The GCP Project Id of these buckets
          type: text
          required: true
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ ConfigOption "derivedSelfHostedGCPProjectId"}}repl{{ end }}
        - name: storageBucketsAwsS3Region
          title: Bucket AWS S3 Region
          when: '{{repl (ConfigOptionEquals "storageBucketsBehaviour" "custom_aws_s3") }}'
          help_text: If the buckets are S3, the region to be used
          type: text
          required: true

    # Advanced Config
    - name: platformAdvancedConfig
      title: Advanced Config
      description: |-
        Here you should config advanced options of CARTO that let you customize a bit more.
        If you need further info, please check [docs.carto.com](https://docs.carto.com).
      items:
        ## Redis
        - name: externalRedisEnabled
          title: Redis
          help_text: |-
            Bring your own Redis instance for your Self-Hosted environment. If not, a container will be deployed for it

            If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-an-external-in-memory-cache).
          type: bool
          default: "0"
        - name: externalRedisHost
          title: Host
          type: text
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
        - name: externalRedisPort
          title: Port
          type: text
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
          value: "6379"
          default: "6379"
        - name: externalRedisPassword
          title: Password
          type: password
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          required: true
        - name: externalRedisTLSBehaviour
          title: Enable SSL/TLS
          type: select_one
          when: '{{repl (ConfigOptionEquals "externalRedisEnabled" "1") }}'
          default: tls_disabled
          items:
            - name: tls_disabled
              title: Disable
            - name: tls_enabled
              title: Enable
        - name: externalRedisTLSCertificate
          title: SSL/TLS certificate
          when: '{{repl and (ConfigOptionEquals "externalRedisEnabled" "1") (ConfigOptionEquals "externalRedisTLSBehaviour" "tls_enabled") }}'
          help_text: |-
            If you don't know what this is, please disable the SSL/TLS Mode.
          type: file
          required: true

        ## Proxy
        - name: externalProxyEnabled
          title: External proxy
          help_text: |-
            CARTO Self-hosted supports operating behind an HTTP or HTTPS proxy. Enable this option if you'd like to use an external proxy.

            If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-an-external-proxy).
          type: bool
          default: "0"
        - name: externalProxyNotConfiguredWarning
          type: label
          title: |-
            ⚠️  The external proxy is not configured correctly. Please, check the [documentation](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-an-external-proxy) to configure it properly.
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (empty HTTPProxy) }}'
        - name: externalProxyType
          title: External proxy type
          type: select_one
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          required: true
          default: http
          items:
            - name: http
              title: HTTP
            - name: https
              title: HTTPS
        - name: externalProxyHost
          title: Host
          type: text
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          value: 'repl{{ HTTPProxy }}'
          readonly: true
        - name: externalProxyExcludedDomains
          title: Excluded domains
          type: text
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (not (empty HTTPProxy)) }}'
          value: 'repl{{ NoProxy }}'
          readonly: true
        - name: externalHttpsProxySslCa
          title: Proxy SSL CA
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (ConfigOptionEquals "externalProxyType" "https") }}'
          type: file
          help_text: |-
             If the proxy certificate is signed by a custom CA, such CA must be included here, but if it's signed by a well known CA, there is no need to add it here.
        - name: externalHttpsProxySslCertificateCheck
          title: SSL certificate checks
          type: bool
          when: '{{repl and (ConfigOptionEquals "externalProxyEnabled" "1") (ConfigOptionEquals "externalProxyType" "https") }}'
          default: "0"
          help_text: |-
            Specify if CARTO Self-hosted should check if the proxy certificate is valid or not.

        ## SSO
        - name: ssoEnabled
          title: Single Sign-On
          help_text: |-
            Enable Single Sign-On (SSO) for your Self-Hosted environment.
            If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-single-sign-on-sso).
          type: bool
          default: "0"
        - name: ssoOrganizationId
          title: Organization ID
          type: text
          help_text: |-
            If you don't have your Organization ID, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-single-sign-on-sso).
          when: '{{repl (ConfigOptionEquals "ssoEnabled" "1") }}'
          required: true

        ## LDS
        - name: locationDataServicesEnable
          title: Location Data Services
            # Temporary disabled. Should be transmitted from the license: https://cartoteam.slack.com/archives/C06GJA56C5S/p1706714429475869
            #  Suggested as 2 fields on the license:
            #    - one for keys (in json format)
            #    - another for the selected providers on each service (geocoding:xxx,isolines:xxx,routing:xxx)
          when: false
          help_text: |-
            Here you should config the Location Data Services.
            If you need further info, please check [docs.carto.com](https://docs.carto.com).
          type: bool
          default: "0"
        - name: locationDataServicesGeocodingProvider
          title: Geocoding
          when: '{{repl (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Please select the provider for Geocoding
          type: select_one
          default: geocoding_none
          items:
            - name: geocoding_tomtom
              title: Tomtom
            - name: geocoding_google
              title: Google
            - name: geocoding_mapbox
              title: Mapbox
            - name: geocoding_here
              title: Here
            - name: geocoding_none
              title: None
        - name: locationDataServicesIsolinesProvider
          title: Isolines
          when: '{{repl (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Please select the provider for Isolines
          type: select_one
          default: isolines_none
          items:
            - name: isolines_tomtom
              title: Tomtom
            - name: isolines_traveltime
              title: Traveltime
            - name: isolines_mapbox
              title: Mapbox
            - name: isolines_here
              title: Here
            - name: isolines_none
              title: None
        - name: locationDataServicesRoutingProvider
          title: Routing
          when: '{{repl (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Please select the provider for Routing
          type: select_one
          default: routing_none
          items:
            - name: routing_tomtom
              title: Tomtom
            - name: routing_here
              title: Here
            - name: routing_none
              title: None
        - name: locationDataServicesTomtomCredentials
          title: LDS Tomtom credentials
          when: '{{repl and (or (ConfigOptionEquals "locationDataServicesGeocodingProvider" "geocoding_tomtom") (ConfigOptionEquals "locationDataServicesIsolinesProvider" "isolines_tomtom") (ConfigOptionEquals "locationDataServicesRoutingProvider" "routing_tomtom")) (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your TomTom LDS Api Key
          required: true
          type: text
        - name: locationDataServicesGoogleCredentials
          title: LDS Google credentials
          when: '{{repl and (ConfigOptionEquals "locationDataServicesGeocodingProvider" "geocoding_google") (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your Google LDS Api Key
          required: true
          type: text
        - name: locationDataServicesMapboxCredentials
          title: LDS Mapbox credentials
          when: '{{repl and (or (ConfigOptionEquals "locationDataServicesGeocodingProvider" "geocoding_mapbox") (ConfigOptionEquals "locationDataServicesIsolinesProvider" "isolines_mapbox")) (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your Mapbox LDS Api Key
          required: true
          type: text
        - name: locationDataServicesHereCredentials
          title: LDS Here credentials
          when: '{{repl and (or (ConfigOptionEquals "locationDataServicesGeocodingProvider" "geocoding_here") (ConfigOptionEquals "locationDataServicesIsolinesProvider" "isolines_here") (ConfigOptionEquals "locationDataServicesRoutingProvider" "routing_here")) (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your Here LDS Api Key
          required: true
          type: text
        - name: locationDataServicesTraveltimeAppId
          title: LDS Traveltime App Id
          when: '{{repl and (ConfigOptionEquals "locationDataServicesIsolinesProvider" "isolines_traveltime") (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your Traveltime App Id
          required: true
          type: text
        - name: locationDataServicesTraveltimeApiKey
          title: LDS Traveltime Api key
          when: '{{repl and (ConfigOptionEquals "locationDataServicesIsolinesProvider" "isolines_traveltime") (ConfigOptionEquals "locationDataServicesEnable" "1") }}'
          help_text: |-
            Set your Traveltime Api Key
          required: true
          type: text

        ## CDW
        - name: enableCDW
          title: CARTO Data Warehouse
          help_text: >-
            The CARTO Data Warehouse is a default connection provided to every CARTO organization,
            designed to help users get started with the platform.
            It grants access to resources such as cloud storage and cloud computing provided by CARTO,
            including access to demo datasets and spatial datasets from CARTO's Data Observatory.
            It uses the same structure as a Google BigQuery connection, with projects, datasets, and tables, and includes
            private datasets for individual users and shared datasets accessible to all users within an organization.
          type: bool
          default: "0"

        ## Imports / Exports
        - name: datawarehousesExportsImportsEnabled
          title: Imports & Exports in Datawarehouses
          type: bool
          default: "0"
          help_text: |-
            Enable when you are working with Redshift, RDS or Snowflake. More information available in our [documentation](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-your-own-buckets).
        - name: datawarehousesExportsImports
          type: heading
          title: Imports & Exports in Datawarehouses
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
        - name: storageBucketsExportGcp
          title: GCP exports bucket name
          help_text: The bucket name to store exported data from BigQuery
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true
          default: repl{{ if ConfigOptionEquals "replicatedLicenseType" "dev"}}repl{{ print (ConfigOption "derivedSelfHostedGCPProjectId") "-export-storage"}}repl{{ end }}
        - name: storageBucketsImportExportAwsAccessKeyId
          title: AWS access key Id
          help_text: The access key id to be used importing data to Redshift and exporting data from Redshift, RDS or Snowflake
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true
        - name: storageBucketsImportExportAwsSecretAccessKey
          title: AWS secret access key
          help_text: The secret access key to be used importing data to Redshift and exporting data from Redshift, RDS or Snowflake
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true
        - name: storageBucketsExportAws
          title: AWS exports bucket name
          help_text: The bucket name to store exported data from Redshift, RDS or Snowflake
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true
        - name: storageBucketsExportAwsRegion
          title: AWS export bucket region
          help_text: The region of the AWS export bucket
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true
        - name: storageBucketsImportExportAwsArnRole
          title: AWS arn bucket role
          help_text: |-
            If AWS is used in self-hosted, the ARN Role to be used importing and exporting data:
            - Import from Redshift and RDS
            - Export to Snowflake, Redshift and RDS

            If you need further info, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/configure-your-own-buckets).
          type: text
          when: '{{repl (ConfigOptionEquals "datawarehousesExportsImportsEnabled" "1") }}'
          required: true

        ## Google Basemaps
        - name: googleBasemapsEnabled
          title: Google Basemaps
          help_text: |
            Enable if you want to use the Google basemaps. If you need info about how to generate the API Key, please check [docs.carto.com](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/enable-google-basemaps).
          type: bool
          default: "0"
        - name: googleMapsAPIKey
          title: Google Maps API Key
          help_text: |-
            The Google Maps API Key is required to use the Google Maps API.
          type: text
          when: '{{repl (ConfigOptionEquals "googleBasemapsEnabled" "1") }}'
          required: true

        ## BigQuery Oauth
        - name: bigqueryOauthEnabled
          title: BigQuery OAuth connections
          help_text: |-
            If you would like the option to connect to BigQuery using OAuth, please enable this option.
            You'll find how to configure it in our [documentation](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/enable-bigquery-oauth-connections).
          type: bool
          default: "0"
        - name: bigqueryOauthClientID
          title: BigQuery OAuth client ID
          when: '{{repl (ConfigOptionEquals "bigqueryOauthEnabled" "1") }}'
          type: text
          required: true
        - name: bigqueryOauthClientSecret
          title: BigQuery OAuth client secret
          when: '{{repl (ConfigOptionEquals "bigqueryOauthEnabled" "1") }}'
          type: password
          required: true

        ## Workload Identity
        # Google
        - name: enableGoogleWorkloadIdentity
          title: Google Workload Identity
          help_text: |-
            The CARTO APIs running on your infrastructure are going to use Workload Identity to access to Google Cloud Platform.
            Please follow these steps to configure it properly [Google Workload Identity](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/use-workload-identity-in-gcp)
          type: bool
          default: "0"
        - name: googleWorkloadIdentityEmail
          title: Google workload identity email
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          required: true
          type: text
          # BigQuery
        - name: enableBigqueryWorkloadIdentityConnection
          title: BigQuery workload identity
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          help_text: |-
            ⚠️ This is going to create a shared connection with all the users of your environment
            Please follow these steps to configure it properly [BigQuery connection Workload Identity](https://docs.carto.com/~/changes/1Lia4Pv0PjH33F9R0CyP/carto-self-hosted/guides/use-workload-identity-in-gcp#create-a-bigquery-connection-managed-using-workload-identity)
          type: bool
          default: "0"
        - name: bigqueryWorkloadIdentityConnectionWorkflowTMP
          title: BigQuery temporary location
          when: &when_google_workload_identity_and_connections >-
            {{repl $cond1 := (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") -}}
            {{repl $cond2 := (ConfigOptionEquals "enableBigqueryWorkloadIdentityConnection" "1") -}}
            {{repl $result := and $cond1 $cond2 -}}
            {{repl $result -}}
          help_text: |-
            BigQuery dataset id used for Carto Workflows to store temporary tables (i.e. `my_gcp_project.my_dataset`)
          required: true
          type: text
        - name: bigqueryWorkloadIdentityConnectionBillingProject
          title: Google billing broject
          when: *when_google_workload_identity_and_connections
          help_text: |-
            GCP project to be charged with the BigQuery costs when using Workload Identity
          required: true
          type: text
        - name: bigqueryWorkloadIdentityConnectionOwnerId
          title: CARTO connection owner id
          when: *when_google_workload_identity_and_connections
          help_text: |-
            Id of the Carto user who will be the owner of the bigquery connection created by workload identity (i.e. `auth0|3idsj230990sj4wsddd10`)
          required: true
          type: text

        ## Carto Platform Credentials
        - name: cartoPlatformGoogleSA
          title: CARTO Platform credentials
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "0") }}'
          help_text: |-
            This is the Service Account that is going to be used by the Self-Hosted environment to access CARTO platform services.
            ⚠️ Please do not modify it unless you know what you are doing.
            Contact [Carto Support](https://docs.carto.com/carto-self-hosted/support) before proceeding or if you have any doubts.
          required: true
          type: textarea
          default: '{{repl LicenseFieldValue "cartoPlatformDefaultSA" }}'
        - name: cartoPlatformWorkloadIdentityEmail
          title: CARTO Platform credentials
          type: text
          when: '{{repl (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}'
          help_text: |-
            As you enable the Google Workload Identity, this is the Service Account email that is going to be used by the Self-Hosted environment to access CARTO platform services.
            If you want to modify it, do in the Google Workload Identity section.
          readonly: true
          value: '{{repl (ConfigOption "googleWorkloadIdentityEmail" ) }}'
        - name: googleServiceAccountUsed
          title: Google Service Account used by the app
          type: textarea
          hidden: true
          readonly: true
          value: |-
            repl{{ $workloadId := (ConfigOptionEquals "enableGoogleWorkloadIdentity" "1") }}
            repl{{ $result := fromJson "{}" }}
            repl{{ if $workloadId }}
            repl{{    $_ := set $result "sa" (ConfigOption "googleWorkloadIdentityEmail") }}
            repl{{ else }}
            repl{{    $extractedEmail := (fromJson (ConfigOption "cartoPlatformGoogleSA") | dig "client_email" "⚠️ Email couldn't be extracted from the configured Service Account ⚠️") }}
            repl{{    $_ := set $result "sa" $extractedEmail }}
            repl{{ end }}
            repl{{ toJson $result }}

        ## High Availability
        - name: enablePlatformHighAvailability
          title: High Availability
          help_text: |-
            Enable if you want a high availability configuration.
          type: bool
          default: "0"
        - name: highAvailabilityMinReplicas
          title: Min replicas
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            Minimum number of replicas to be deployed for each component.
          type: text
          required: true
          default: "2"
        - name: highAvailabilityMaxReplicas
          title: Max replicas
          when: '{{repl (ConfigOptionEquals "enablePlatformHighAvailability" "1") }}'
          help_text: |-
            Maximum number of replicas to be deployed for each component.
          type: text
          required: true
          default: "3"

        ## Tuning
        - name: enablePlatformAdvancedTuning
          title: Advanced Platform Tuning
          type: bool
          default: "0"
          help_text: |-
            ⚠️ Check only for tuning your CARTO Self-Hosted environment with advanced parameters

    # Advanced Tuning
    - name: platformAdvancedTuning
      title: Advanced Tuning
      description: |-
        Here you can config advanced options for tuning your CARTO deployment.
        If you need further info, please check [docs.carto.com](https://docs.carto.com).
      when: repl{{ ConfigOptionEquals "enablePlatformAdvancedTuning" "1" }}
      items:
      ## Tunning
      - name: platformAdvancedTuningValues
        help_text: |-
          ⚠️ I understand that the following options are advanced and could break my installation, but I know what I am doing
        type: textarea
        when: repl{{ ConfigOptionEquals "enablePlatformAdvancedTuning" "1" }}
        title: ""
